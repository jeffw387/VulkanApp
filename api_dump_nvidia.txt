Thread 0, Frame 0:
vkCreateInstance(pCreateInfo, pAllocator, pInstance) returns VkResult VK_SUCCESS (0):
    pCreateInfo:                    const VkInstanceCreateInfo* = 000000999A1A8B80:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO (1)
        pNext:                          const void* = 000000999A1A8B60
        flags:                          VkInstanceCreateFlags = 0
        pApplicationInfo:               const VkApplicationInfo* = 000000999A1A9B08:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_APPLICATION_INFO (0)
            pNext:                          const void* = NULL
            pApplicationName:               const char* = "AppName"
            applicationVersion:             uint32_t = 4194304
            pEngineName:                    const char* = "VulkanApp"
            engineVersion:                  uint32_t = 4194304
            apiVersion:                     uint32_t = 4194304
        enabledLayerCount:              uint32_t = 0
        ppEnabledLayerNames:            const char* const* = NULL
        enabledExtensionCount:          uint32_t = 3
        ppEnabledExtensionNames:        const char* const* = 000001D01983F660
            ppEnabledExtensionNames[0]:     const char* const = "VK_EXT_debug_report"
            ppEnabledExtensionNames[1]:     const char* const = "VK_KHR_surface"
            ppEnabledExtensionNames[2]:     const char* const = "VK_KHR_win32_surface"
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pInstance:                      VkInstance* = 000001D019845820

Thread 0, Frame 0:
vkCreateDebugReportCallbackEXT(instance, pCreateInfo, pAllocator, pCallback) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001D019845820
    pCreateInfo:                    const VkDebugReportCallbackCreateInfoEXT* = 000000999A1A8DE8:
        sType:                          VkStructureType = UNKNOWN (1000011000)
        pNext:                          const void* = NULL
        flags:                          VkDebugReportFlagsEXT = 31 (VK_DEBUG_REPORT_INFORMATION_BIT_EXT | VK_DEBUG_REPORT_WARNING_BIT_EXT | VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT | VK_DEBUG_REPORT_ERROR_BIT_EXT | VK_DEBUG_REPORT_DEBUG_BIT_EXT)
        pfnCallback:                    PFN_vkDebugReportCallbackEXT = 00007FF7FB772FB0
        pUserData:                      void* = NULL
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCallback:                      VkDebugReportCallbackEXT* = 000001D01C3C33E0

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001D019845820
    pPhysicalDeviceCount:           uint32_t* = 2
    pPhysicalDevices:               VkPhysicalDevice* = NULL

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001D019845820
    pPhysicalDeviceCount:           uint32_t* = 2
    pPhysicalDevices:               VkPhysicalDevice* = 000001D01C3C38A0
        pPhysicalDevices[0]:            VkPhysicalDevice = 000001D01C5CE210
        pPhysicalDevices[1]:            VkPhysicalDevice = 000001D01C5CE450

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001D01C5CE210
    pProperties:                    VkPhysicalDeviceProperties* = 000000999A1A8880:
        apiVersion:                     uint32_t = 4194360
        driverVersion:                  uint32_t = 65538
        vendorID:                       uint32_t = 32902
        deviceID:                       uint32_t = 22806
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU (1)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "Intel(R) HD Graphics 620"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 000000999A1A8994
            pipelineCacheUUID[0]:           uint8_t = 213
            pipelineCacheUUID[1]:           uint8_t = 42
            pipelineCacheUUID[2]:           uint8_t = 208
            pipelineCacheUUID[3]:           uint8_t = 37
            pipelineCacheUUID[4]:           uint8_t = 220
            pipelineCacheUUID[5]:           uint8_t = 36
            pipelineCacheUUID[6]:           uint8_t = 226
            pipelineCacheUUID[7]:           uint8_t = 43
            pipelineCacheUUID[8]:           uint8_t = 222
            pipelineCacheUUID[9]:           uint8_t = 37
            pipelineCacheUUID[10]:          uint8_t = 216
            pipelineCacheUUID[11]:          uint8_t = 41
            pipelineCacheUUID[12]:          uint8_t = 222
            pipelineCacheUUID[13]:          uint8_t = 44
            pipelineCacheUUID[14]:          uint8_t = 160
            pipelineCacheUUID[15]:          uint8_t = 27
        limits:                         VkPhysicalDeviceLimits = 000000999A1A89A8:
            maxImageDimension1D:            uint32_t = 16384
            maxImageDimension2D:            uint32_t = 16384
            maxImageDimension3D:            uint32_t = 2048
            maxImageDimensionCube:          uint32_t = 16384
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 65536
            maxStorageBufferRange:          uint32_t = 134217728
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 161063336
            maxSamplerAllocationCount:      uint32_t = 4000
            bufferImageGranularity:         VkDeviceSize = 1
            sparseAddressSpaceSize:         VkDeviceSize = 17592186044416
            maxBoundDescriptorSets:         uint32_t = 8
            maxPerStageDescriptorSamplers:  uint32_t = 64
            maxPerStageDescriptorUniformBuffers: uint32_t = 200
            maxPerStageDescriptorStorageBuffers: uint32_t = 200
            maxPerStageDescriptorSampledImages: uint32_t = 200
            maxPerStageDescriptorStorageImages: uint32_t = 16
            maxPerStageDescriptorInputAttachments: uint32_t = 8
            maxPerStageResources:           uint32_t = 200
            maxDescriptorSetSamplers:       uint32_t = 384
            maxDescriptorSetUniformBuffers: uint32_t = 1200
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 16
            maxDescriptorSetStorageBuffers: uint32_t = 1200
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages:  uint32_t = 1200
            maxDescriptorSetStorageImages:  uint32_t = 96
            maxDescriptorSetInputAttachments: uint32_t = 8
            maxVertexInputAttributes:       uint32_t = 16
            maxVertexInputBindings:         uint32_t = 16
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 4095
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4096
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 128
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 256
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 16
            maxComputeSharedMemorySize:     uint32_t = 32768
            maxComputeWorkGroupCount:       uint32_t[3] = 000000999A1A8A84
                maxComputeWorkGroupCount[0]:    uint32_t = 65536
                maxComputeWorkGroupCount[1]:    uint32_t = 65536
                maxComputeWorkGroupCount[2]:    uint32_t = 65536
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize:        uint32_t[3] = 000000999A1A8A94
                maxComputeWorkGroupSize[0]:     uint32_t = 1024
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 64
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 8
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 16
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 000000999A1A8AC0
                maxViewportDimensions[0]:       uint32_t = 32768
                maxViewportDimensions[1]:       uint32_t = 32768
            viewportBoundsRange:            float[2] = 000000999A1A8AC8
                viewportBoundsRange[0]:         float = -65536
                viewportBoundsRange[1]:         float = 65535
            viewportSubPixelBits:           uint32_t = 8
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 32
            minStorageBufferOffsetAlignment: VkDeviceSize = 16
            minTexelOffset:                 int32_t = -8
            maxTexelOffset:                 uint32_t = 7
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -0.5
            maxInterpolationOffset:         float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:            uint32_t = 16384
            maxFramebufferHeight:           uint32_t = 16384
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 83
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 000000999A1A8B64
                pointSizeRange[0]:              float = 0.125
                pointSizeRange[1]:              float = 255.875
            lineWidthRange:                 float[2] = 000000999A1A8B6C
                lineWidthRange[0]:              float = 0
                lineWidthRange[1]:              float = 7.99219
            pointSizeGranularity:           float = 0.125
            lineWidthGranularity:           float = 0.0078125
            strictLines:                    VkBool32 = 0
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 16
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 16
            nonCoherentAtomSize:            VkDeviceSize = 1
        sparseProperties:               VkPhysicalDeviceSparseProperties = 000000999A1A8BA0:
            residencyStandard2DBlockShape:  VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape:  VkBool32 = 1
            residencyAlignedMipSize:        VkBool32 = 0
            residencyNonResidentStrict:     VkBool32 = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001D01C5CE450
    pProperties:                    VkPhysicalDeviceProperties* = 000000999A1A8880:
        apiVersion:                     uint32_t = 4198470
        driverVersion:                  uint32_t = 1669513216
        vendorID:                       uint32_t = 4318
        deviceID:                       uint32_t = 7041
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "GeForce GTX 1070"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 000000999A1A8994
            pipelineCacheUUID[0]:           uint8_t = 101
            pipelineCacheUUID[1]:           uint8_t = 12
            pipelineCacheUUID[2]:           uint8_t = 50
            pipelineCacheUUID[3]:           uint8_t = 54
            pipelineCacheUUID[4]:           uint8_t = 45
            pipelineCacheUUID[5]:           uint8_t = 186
            pipelineCacheUUID[6]:           uint8_t = 188
            pipelineCacheUUID[7]:           uint8_t = 117
            pipelineCacheUUID[8]:           uint8_t = 20
            pipelineCacheUUID[9]:           uint8_t = 6
            pipelineCacheUUID[10]:          uint8_t = 31
            pipelineCacheUUID[11]:          uint8_t = 42
            pipelineCacheUUID[12]:          uint8_t = 74
            pipelineCacheUUID[13]:          uint8_t = 200
            pipelineCacheUUID[14]:          uint8_t = 124
            pipelineCacheUUID[15]:          uint8_t = 156
        limits:                         VkPhysicalDeviceLimits = 000000999A1A89A8:
            maxImageDimension1D:            uint32_t = 32768
            maxImageDimension2D:            uint32_t = 32768
            maxImageDimension3D:            uint32_t = 16384
            maxImageDimensionCube:          uint32_t = 32768
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 65536
            maxStorageBufferRange:          uint32_t = 4294967295
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 4096
            maxSamplerAllocationCount:      uint32_t = 4000
            bufferImageGranularity:         VkDeviceSize = 1024
            sparseAddressSpaceSize:         VkDeviceSize = 18446744073709551615
            maxBoundDescriptorSets:         uint32_t = 8
            maxPerStageDescriptorSamplers:  uint32_t = 1048576
            maxPerStageDescriptorUniformBuffers: uint32_t = 15
            maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
            maxPerStageDescriptorSampledImages: uint32_t = 1048576
            maxPerStageDescriptorStorageImages: uint32_t = 1048576
            maxPerStageDescriptorInputAttachments: uint32_t = 1048576
            maxPerStageResources:           uint32_t = 4294967295
            maxDescriptorSetSamplers:       uint32_t = 1048576
            maxDescriptorSetUniformBuffers: uint32_t = 90
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
            maxDescriptorSetStorageBuffers: uint32_t = 1048576
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages:  uint32_t = 1048576
            maxDescriptorSetStorageImages:  uint32_t = 1048576
            maxDescriptorSetInputAttachments: uint32_t = 1048576
            maxVertexInputAttributes:       uint32_t = 32
            maxVertexInputBindings:         uint32_t = 32
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 2048
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4216
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 128
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 1024
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 16
            maxComputeSharedMemorySize:     uint32_t = 49152
            maxComputeWorkGroupCount:       uint32_t[3] = 000000999A1A8A84
                maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                maxComputeWorkGroupCount[1]:    uint32_t = 65535
                maxComputeWorkGroupCount[2]:    uint32_t = 65535
            maxComputeWorkGroupInvocations: uint32_t = 1536
            maxComputeWorkGroupSize:        uint32_t[3] = 000000999A1A8A94
                maxComputeWorkGroupSize[0]:     uint32_t = 1536
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 64
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 8
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 15
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 000000999A1A8AC0
                maxViewportDimensions[0]:       uint32_t = 32768
                maxViewportDimensions[1]:       uint32_t = 32768
            viewportBoundsRange:            float[2] = 000000999A1A8AC8
                viewportBoundsRange[0]:         float = -65536
                viewportBoundsRange[1]:         float = 65536
            viewportSubPixelBits:           uint32_t = 8
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 256
            minStorageBufferOffsetAlignment: VkDeviceSize = 32
            minTexelOffset:                 int32_t = -8
            maxTexelOffset:                 uint32_t = 7
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -0.5
            maxInterpolationOffset:         float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:            uint32_t = 32768
            maxFramebufferHeight:           uint32_t = 32768
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 1
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 000000999A1A8B64
                pointSizeRange[0]:              float = 1
                pointSizeRange[1]:              float = 189.875
            lineWidthRange:                 float[2] = 000000999A1A8B6C
                lineWidthRange[0]:              float = 0.5
                lineWidthRange[1]:              float = 10
            pointSizeGranularity:           float = 0.125
            lineWidthGranularity:           float = 0.125
            strictLines:                    VkBool32 = 1
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
            nonCoherentAtomSize:            VkDeviceSize = 64
        sparseProperties:               VkPhysicalDeviceSparseProperties = 000000999A1A8BA0:
            residencyStandard2DBlockShape:  VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape:  VkBool32 = 1
            residencyAlignedMipSize:        VkBool32 = 0
            residencyNonResidentStrict:     VkBool32 = 1

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001D019845820
    pPhysicalDeviceCount:           uint32_t* = 2
    pPhysicalDevices:               VkPhysicalDevice* = NULL

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001D019845820
    pPhysicalDeviceCount:           uint32_t* = 2
    pPhysicalDevices:               VkPhysicalDevice* = 000001D019893B30
        pPhysicalDevices[0]:            VkPhysicalDevice = 000001D01C5CE210
        pPhysicalDevices[1]:            VkPhysicalDevice = 000001D01C5CE450

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001D01C5CE210
    pProperties:                    VkPhysicalDeviceProperties* = 000000999A1A8870:
        apiVersion:                     uint32_t = 4194360
        driverVersion:                  uint32_t = 65538
        vendorID:                       uint32_t = 32902
        deviceID:                       uint32_t = 22806
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU (1)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "Intel(R) HD Graphics 620"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 000000999A1A8984
            pipelineCacheUUID[0]:           uint8_t = 213
            pipelineCacheUUID[1]:           uint8_t = 42
            pipelineCacheUUID[2]:           uint8_t = 208
            pipelineCacheUUID[3]:           uint8_t = 37
            pipelineCacheUUID[4]:           uint8_t = 220
            pipelineCacheUUID[5]:           uint8_t = 36
            pipelineCacheUUID[6]:           uint8_t = 226
            pipelineCacheUUID[7]:           uint8_t = 43
            pipelineCacheUUID[8]:           uint8_t = 222
            pipelineCacheUUID[9]:           uint8_t = 37
            pipelineCacheUUID[10]:          uint8_t = 216
            pipelineCacheUUID[11]:          uint8_t = 41
            pipelineCacheUUID[12]:          uint8_t = 222
            pipelineCacheUUID[13]:          uint8_t = 44
            pipelineCacheUUID[14]:          uint8_t = 160
            pipelineCacheUUID[15]:          uint8_t = 27
        limits:                         VkPhysicalDeviceLimits = 000000999A1A8998:
            maxImageDimension1D:            uint32_t = 16384
            maxImageDimension2D:            uint32_t = 16384
            maxImageDimension3D:            uint32_t = 2048
            maxImageDimensionCube:          uint32_t = 16384
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 65536
            maxStorageBufferRange:          uint32_t = 134217728
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 161063336
            maxSamplerAllocationCount:      uint32_t = 4000
            bufferImageGranularity:         VkDeviceSize = 1
            sparseAddressSpaceSize:         VkDeviceSize = 17592186044416
            maxBoundDescriptorSets:         uint32_t = 8
            maxPerStageDescriptorSamplers:  uint32_t = 64
            maxPerStageDescriptorUniformBuffers: uint32_t = 200
            maxPerStageDescriptorStorageBuffers: uint32_t = 200
            maxPerStageDescriptorSampledImages: uint32_t = 200
            maxPerStageDescriptorStorageImages: uint32_t = 16
            maxPerStageDescriptorInputAttachments: uint32_t = 8
            maxPerStageResources:           uint32_t = 200
            maxDescriptorSetSamplers:       uint32_t = 384
            maxDescriptorSetUniformBuffers: uint32_t = 1200
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 16
            maxDescriptorSetStorageBuffers: uint32_t = 1200
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages:  uint32_t = 1200
            maxDescriptorSetStorageImages:  uint32_t = 96
            maxDescriptorSetInputAttachments: uint32_t = 8
            maxVertexInputAttributes:       uint32_t = 16
            maxVertexInputBindings:         uint32_t = 16
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 4095
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4096
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 128
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 256
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 16
            maxComputeSharedMemorySize:     uint32_t = 32768
            maxComputeWorkGroupCount:       uint32_t[3] = 000000999A1A8A74
                maxComputeWorkGroupCount[0]:    uint32_t = 65536
                maxComputeWorkGroupCount[1]:    uint32_t = 65536
                maxComputeWorkGroupCount[2]:    uint32_t = 65536
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize:        uint32_t[3] = 000000999A1A8A84
                maxComputeWorkGroupSize[0]:     uint32_t = 1024
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 64
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 8
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 16
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 000000999A1A8AB0
                maxViewportDimensions[0]:       uint32_t = 32768
                maxViewportDimensions[1]:       uint32_t = 32768
            viewportBoundsRange:            float[2] = 000000999A1A8AB8
                viewportBoundsRange[0]:         float = -65536
                viewportBoundsRange[1]:         float = 65535
            viewportSubPixelBits:           uint32_t = 8
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 32
            minStorageBufferOffsetAlignment: VkDeviceSize = 16
            minTexelOffset:                 int32_t = -8
            maxTexelOffset:                 uint32_t = 7
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -0.5
            maxInterpolationOffset:         float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:            uint32_t = 16384
            maxFramebufferHeight:           uint32_t = 16384
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 83
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 000000999A1A8B54
                pointSizeRange[0]:              float = 0.125
                pointSizeRange[1]:              float = 255.875
            lineWidthRange:                 float[2] = 000000999A1A8B5C
                lineWidthRange[0]:              float = 0
                lineWidthRange[1]:              float = 7.99219
            pointSizeGranularity:           float = 0.125
            lineWidthGranularity:           float = 0.0078125
            strictLines:                    VkBool32 = 0
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 16
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 16
            nonCoherentAtomSize:            VkDeviceSize = 1
        sparseProperties:               VkPhysicalDeviceSparseProperties = 000000999A1A8B90:
            residencyStandard2DBlockShape:  VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape:  VkBool32 = 1
            residencyAlignedMipSize:        VkBool32 = 0
            residencyNonResidentStrict:     VkBool32 = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001D01C5CE450
    pProperties:                    VkPhysicalDeviceProperties* = 000000999A1A8870:
        apiVersion:                     uint32_t = 4198470
        driverVersion:                  uint32_t = 1669513216
        vendorID:                       uint32_t = 4318
        deviceID:                       uint32_t = 7041
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "GeForce GTX 1070"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 000000999A1A8984
            pipelineCacheUUID[0]:           uint8_t = 101
            pipelineCacheUUID[1]:           uint8_t = 12
            pipelineCacheUUID[2]:           uint8_t = 50
            pipelineCacheUUID[3]:           uint8_t = 54
            pipelineCacheUUID[4]:           uint8_t = 45
            pipelineCacheUUID[5]:           uint8_t = 186
            pipelineCacheUUID[6]:           uint8_t = 188
            pipelineCacheUUID[7]:           uint8_t = 117
            pipelineCacheUUID[8]:           uint8_t = 20
            pipelineCacheUUID[9]:           uint8_t = 6
            pipelineCacheUUID[10]:          uint8_t = 31
            pipelineCacheUUID[11]:          uint8_t = 42
            pipelineCacheUUID[12]:          uint8_t = 74
            pipelineCacheUUID[13]:          uint8_t = 200
            pipelineCacheUUID[14]:          uint8_t = 124
            pipelineCacheUUID[15]:          uint8_t = 156
        limits:                         VkPhysicalDeviceLimits = 000000999A1A8998:
            maxImageDimension1D:            uint32_t = 32768
            maxImageDimension2D:            uint32_t = 32768
            maxImageDimension3D:            uint32_t = 16384
            maxImageDimensionCube:          uint32_t = 32768
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 65536
            maxStorageBufferRange:          uint32_t = 4294967295
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 4096
            maxSamplerAllocationCount:      uint32_t = 4000
            bufferImageGranularity:         VkDeviceSize = 1024
            sparseAddressSpaceSize:         VkDeviceSize = 18446744073709551615
            maxBoundDescriptorSets:         uint32_t = 8
            maxPerStageDescriptorSamplers:  uint32_t = 1048576
            maxPerStageDescriptorUniformBuffers: uint32_t = 15
            maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
            maxPerStageDescriptorSampledImages: uint32_t = 1048576
            maxPerStageDescriptorStorageImages: uint32_t = 1048576
            maxPerStageDescriptorInputAttachments: uint32_t = 1048576
            maxPerStageResources:           uint32_t = 4294967295
            maxDescriptorSetSamplers:       uint32_t = 1048576
            maxDescriptorSetUniformBuffers: uint32_t = 90
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
            maxDescriptorSetStorageBuffers: uint32_t = 1048576
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages:  uint32_t = 1048576
            maxDescriptorSetStorageImages:  uint32_t = 1048576
            maxDescriptorSetInputAttachments: uint32_t = 1048576
            maxVertexInputAttributes:       uint32_t = 32
            maxVertexInputBindings:         uint32_t = 32
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 2048
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4216
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 128
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 1024
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 16
            maxComputeSharedMemorySize:     uint32_t = 49152
            maxComputeWorkGroupCount:       uint32_t[3] = 000000999A1A8A74
                maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                maxComputeWorkGroupCount[1]:    uint32_t = 65535
                maxComputeWorkGroupCount[2]:    uint32_t = 65535
            maxComputeWorkGroupInvocations: uint32_t = 1536
            maxComputeWorkGroupSize:        uint32_t[3] = 000000999A1A8A84
                maxComputeWorkGroupSize[0]:     uint32_t = 1536
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 64
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 8
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 15
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 000000999A1A8AB0
                maxViewportDimensions[0]:       uint32_t = 32768
                maxViewportDimensions[1]:       uint32_t = 32768
            viewportBoundsRange:            float[2] = 000000999A1A8AB8
                viewportBoundsRange[0]:         float = -65536
                viewportBoundsRange[1]:         float = 65536
            viewportSubPixelBits:           uint32_t = 8
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 256
            minStorageBufferOffsetAlignment: VkDeviceSize = 32
            minTexelOffset:                 int32_t = -8
            maxTexelOffset:                 uint32_t = 7
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -0.5
            maxInterpolationOffset:         float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:            uint32_t = 32768
            maxFramebufferHeight:           uint32_t = 32768
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 1
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 000000999A1A8B54
                pointSizeRange[0]:              float = 1
                pointSizeRange[1]:              float = 189.875
            lineWidthRange:                 float[2] = 000000999A1A8B5C
                lineWidthRange[0]:              float = 0.5
                lineWidthRange[1]:              float = 10
            pointSizeGranularity:           float = 0.125
            lineWidthGranularity:           float = 0.125
            strictLines:                    VkBool32 = 1
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
            nonCoherentAtomSize:            VkDeviceSize = 64
        sparseProperties:               VkPhysicalDeviceSparseProperties = 000000999A1A8B90:
            residencyStandard2DBlockShape:  VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape:  VkBool32 = 1
            residencyAlignedMipSize:        VkBool32 = 0
            residencyNonResidentStrict:     VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001D01C5CE450
    pProperties:                    VkPhysicalDeviceProperties* = 000000999A1A8870:
        apiVersion:                     uint32_t = 4198470
        driverVersion:                  uint32_t = 1669513216
        vendorID:                       uint32_t = 4318
        deviceID:                       uint32_t = 7041
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "GeForce GTX 1070"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 000000999A1A8984
            pipelineCacheUUID[0]:           uint8_t = 101
            pipelineCacheUUID[1]:           uint8_t = 12
            pipelineCacheUUID[2]:           uint8_t = 50
            pipelineCacheUUID[3]:           uint8_t = 54
            pipelineCacheUUID[4]:           uint8_t = 45
            pipelineCacheUUID[5]:           uint8_t = 186
            pipelineCacheUUID[6]:           uint8_t = 188
            pipelineCacheUUID[7]:           uint8_t = 117
            pipelineCacheUUID[8]:           uint8_t = 20
            pipelineCacheUUID[9]:           uint8_t = 6
            pipelineCacheUUID[10]:          uint8_t = 31
            pipelineCacheUUID[11]:          uint8_t = 42
            pipelineCacheUUID[12]:          uint8_t = 74
            pipelineCacheUUID[13]:          uint8_t = 200
            pipelineCacheUUID[14]:          uint8_t = 124
            pipelineCacheUUID[15]:          uint8_t = 156
        limits:                         VkPhysicalDeviceLimits = 000000999A1A8998:
            maxImageDimension1D:            uint32_t = 32768
            maxImageDimension2D:            uint32_t = 32768
            maxImageDimension3D:            uint32_t = 16384
            maxImageDimensionCube:          uint32_t = 32768
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 65536
            maxStorageBufferRange:          uint32_t = 4294967295
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 4096
            maxSamplerAllocationCount:      uint32_t = 4000
            bufferImageGranularity:         VkDeviceSize = 1024
            sparseAddressSpaceSize:         VkDeviceSize = 18446744073709551615
            maxBoundDescriptorSets:         uint32_t = 8
            maxPerStageDescriptorSamplers:  uint32_t = 1048576
            maxPerStageDescriptorUniformBuffers: uint32_t = 15
            maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
            maxPerStageDescriptorSampledImages: uint32_t = 1048576
            maxPerStageDescriptorStorageImages: uint32_t = 1048576
            maxPerStageDescriptorInputAttachments: uint32_t = 1048576
            maxPerStageResources:           uint32_t = 4294967295
            maxDescriptorSetSamplers:       uint32_t = 1048576
            maxDescriptorSetUniformBuffers: uint32_t = 90
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
            maxDescriptorSetStorageBuffers: uint32_t = 1048576
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages:  uint32_t = 1048576
            maxDescriptorSetStorageImages:  uint32_t = 1048576
            maxDescriptorSetInputAttachments: uint32_t = 1048576
            maxVertexInputAttributes:       uint32_t = 32
            maxVertexInputBindings:         uint32_t = 32
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 2048
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4216
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 128
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 1024
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 16
            maxComputeSharedMemorySize:     uint32_t = 49152
            maxComputeWorkGroupCount:       uint32_t[3] = 000000999A1A8A74
                maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                maxComputeWorkGroupCount[1]:    uint32_t = 65535
                maxComputeWorkGroupCount[2]:    uint32_t = 65535
            maxComputeWorkGroupInvocations: uint32_t = 1536
            maxComputeWorkGroupSize:        uint32_t[3] = 000000999A1A8A84
                maxComputeWorkGroupSize[0]:     uint32_t = 1536
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 64
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 8
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 15
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 000000999A1A8AB0
                maxViewportDimensions[0]:       uint32_t = 32768
                maxViewportDimensions[1]:       uint32_t = 32768
            viewportBoundsRange:            float[2] = 000000999A1A8AB8
                viewportBoundsRange[0]:         float = -65536
                viewportBoundsRange[1]:         float = 65536
            viewportSubPixelBits:           uint32_t = 8
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 256
            minStorageBufferOffsetAlignment: VkDeviceSize = 32
            minTexelOffset:                 int32_t = -8
            maxTexelOffset:                 uint32_t = 7
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -0.5
            maxInterpolationOffset:         float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:            uint32_t = 32768
            maxFramebufferHeight:           uint32_t = 32768
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 1
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 000000999A1A8B54
                pointSizeRange[0]:              float = 1
                pointSizeRange[1]:              float = 189.875
            lineWidthRange:                 float[2] = 000000999A1A8B5C
                lineWidthRange[0]:              float = 0.5
                lineWidthRange[1]:              float = 10
            pointSizeGranularity:           float = 0.125
            lineWidthGranularity:           float = 0.125
            strictLines:                    VkBool32 = 1
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
            nonCoherentAtomSize:            VkDeviceSize = 64
        sparseProperties:               VkPhysicalDeviceSparseProperties = 000000999A1A8B90:
            residencyStandard2DBlockShape:  VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape:  VkBool32 = 1
            residencyAlignedMipSize:        VkBool32 = 0
            residencyNonResidentStrict:     VkBool32 = 1

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001D019845820
    pPhysicalDeviceCount:           uint32_t* = 2
    pPhysicalDevices:               VkPhysicalDevice* = NULL

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001D019845820
    pPhysicalDeviceCount:           uint32_t* = 2
    pPhysicalDevices:               VkPhysicalDevice* = 000001D019893670
        pPhysicalDevices[0]:            VkPhysicalDevice = 000001D01C5CE210
        pPhysicalDevices[1]:            VkPhysicalDevice = 000001D01C5CE450

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001D01C5CE210
    pProperties:                    VkPhysicalDeviceProperties* = 000000999A1A8880:
        apiVersion:                     uint32_t = 4194360
        driverVersion:                  uint32_t = 65538
        vendorID:                       uint32_t = 32902
        deviceID:                       uint32_t = 22806
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU (1)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "Intel(R) HD Graphics 620"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 000000999A1A8994
            pipelineCacheUUID[0]:           uint8_t = 213
            pipelineCacheUUID[1]:           uint8_t = 42
            pipelineCacheUUID[2]:           uint8_t = 208
            pipelineCacheUUID[3]:           uint8_t = 37
            pipelineCacheUUID[4]:           uint8_t = 220
            pipelineCacheUUID[5]:           uint8_t = 36
            pipelineCacheUUID[6]:           uint8_t = 226
            pipelineCacheUUID[7]:           uint8_t = 43
            pipelineCacheUUID[8]:           uint8_t = 222
            pipelineCacheUUID[9]:           uint8_t = 37
            pipelineCacheUUID[10]:          uint8_t = 216
            pipelineCacheUUID[11]:          uint8_t = 41
            pipelineCacheUUID[12]:          uint8_t = 222
            pipelineCacheUUID[13]:          uint8_t = 44
            pipelineCacheUUID[14]:          uint8_t = 160
            pipelineCacheUUID[15]:          uint8_t = 27
        limits:                         VkPhysicalDeviceLimits = 000000999A1A89A8:
            maxImageDimension1D:            uint32_t = 16384
            maxImageDimension2D:            uint32_t = 16384
            maxImageDimension3D:            uint32_t = 2048
            maxImageDimensionCube:          uint32_t = 16384
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 65536
            maxStorageBufferRange:          uint32_t = 134217728
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 161063336
            maxSamplerAllocationCount:      uint32_t = 4000
            bufferImageGranularity:         VkDeviceSize = 1
            sparseAddressSpaceSize:         VkDeviceSize = 17592186044416
            maxBoundDescriptorSets:         uint32_t = 8
            maxPerStageDescriptorSamplers:  uint32_t = 64
            maxPerStageDescriptorUniformBuffers: uint32_t = 200
            maxPerStageDescriptorStorageBuffers: uint32_t = 200
            maxPerStageDescriptorSampledImages: uint32_t = 200
            maxPerStageDescriptorStorageImages: uint32_t = 16
            maxPerStageDescriptorInputAttachments: uint32_t = 8
            maxPerStageResources:           uint32_t = 200
            maxDescriptorSetSamplers:       uint32_t = 384
            maxDescriptorSetUniformBuffers: uint32_t = 1200
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 16
            maxDescriptorSetStorageBuffers: uint32_t = 1200
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages:  uint32_t = 1200
            maxDescriptorSetStorageImages:  uint32_t = 96
            maxDescriptorSetInputAttachments: uint32_t = 8
            maxVertexInputAttributes:       uint32_t = 16
            maxVertexInputBindings:         uint32_t = 16
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 4095
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4096
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 128
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 256
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 16
            maxComputeSharedMemorySize:     uint32_t = 32768
            maxComputeWorkGroupCount:       uint32_t[3] = 000000999A1A8A84
                maxComputeWorkGroupCount[0]:    uint32_t = 65536
                maxComputeWorkGroupCount[1]:    uint32_t = 65536
                maxComputeWorkGroupCount[2]:    uint32_t = 65536
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize:        uint32_t[3] = 000000999A1A8A94
                maxComputeWorkGroupSize[0]:     uint32_t = 1024
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 64
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 8
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 16
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 000000999A1A8AC0
                maxViewportDimensions[0]:       uint32_t = 32768
                maxViewportDimensions[1]:       uint32_t = 32768
            viewportBoundsRange:            float[2] = 000000999A1A8AC8
                viewportBoundsRange[0]:         float = -65536
                viewportBoundsRange[1]:         float = 65535
            viewportSubPixelBits:           uint32_t = 8
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 32
            minStorageBufferOffsetAlignment: VkDeviceSize = 16
            minTexelOffset:                 int32_t = -8
            maxTexelOffset:                 uint32_t = 7
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -0.5
            maxInterpolationOffset:         float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:            uint32_t = 16384
            maxFramebufferHeight:           uint32_t = 16384
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 83
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 000000999A1A8B64
                pointSizeRange[0]:              float = 0.125
                pointSizeRange[1]:              float = 255.875
            lineWidthRange:                 float[2] = 000000999A1A8B6C
                lineWidthRange[0]:              float = 0
                lineWidthRange[1]:              float = 7.99219
            pointSizeGranularity:           float = 0.125
            lineWidthGranularity:           float = 0.0078125
            strictLines:                    VkBool32 = 0
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 16
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 16
            nonCoherentAtomSize:            VkDeviceSize = 1
        sparseProperties:               VkPhysicalDeviceSparseProperties = 000000999A1A8BA0:
            residencyStandard2DBlockShape:  VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape:  VkBool32 = 1
            residencyAlignedMipSize:        VkBool32 = 0
            residencyNonResidentStrict:     VkBool32 = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001D01C5CE450
    pProperties:                    VkPhysicalDeviceProperties* = 000000999A1A8880:
        apiVersion:                     uint32_t = 4198470
        driverVersion:                  uint32_t = 1669513216
        vendorID:                       uint32_t = 4318
        deviceID:                       uint32_t = 7041
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "GeForce GTX 1070"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 000000999A1A8994
            pipelineCacheUUID[0]:           uint8_t = 101
            pipelineCacheUUID[1]:           uint8_t = 12
            pipelineCacheUUID[2]:           uint8_t = 50
            pipelineCacheUUID[3]:           uint8_t = 54
            pipelineCacheUUID[4]:           uint8_t = 45
            pipelineCacheUUID[5]:           uint8_t = 186
            pipelineCacheUUID[6]:           uint8_t = 188
            pipelineCacheUUID[7]:           uint8_t = 117
            pipelineCacheUUID[8]:           uint8_t = 20
            pipelineCacheUUID[9]:           uint8_t = 6
            pipelineCacheUUID[10]:          uint8_t = 31
            pipelineCacheUUID[11]:          uint8_t = 42
            pipelineCacheUUID[12]:          uint8_t = 74
            pipelineCacheUUID[13]:          uint8_t = 200
            pipelineCacheUUID[14]:          uint8_t = 124
            pipelineCacheUUID[15]:          uint8_t = 156
        limits:                         VkPhysicalDeviceLimits = 000000999A1A89A8:
            maxImageDimension1D:            uint32_t = 32768
            maxImageDimension2D:            uint32_t = 32768
            maxImageDimension3D:            uint32_t = 16384
            maxImageDimensionCube:          uint32_t = 32768
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 65536
            maxStorageBufferRange:          uint32_t = 4294967295
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 4096
            maxSamplerAllocationCount:      uint32_t = 4000
            bufferImageGranularity:         VkDeviceSize = 1024
            sparseAddressSpaceSize:         VkDeviceSize = 18446744073709551615
            maxBoundDescriptorSets:         uint32_t = 8
            maxPerStageDescriptorSamplers:  uint32_t = 1048576
            maxPerStageDescriptorUniformBuffers: uint32_t = 15
            maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
            maxPerStageDescriptorSampledImages: uint32_t = 1048576
            maxPerStageDescriptorStorageImages: uint32_t = 1048576
            maxPerStageDescriptorInputAttachments: uint32_t = 1048576
            maxPerStageResources:           uint32_t = 4294967295
            maxDescriptorSetSamplers:       uint32_t = 1048576
            maxDescriptorSetUniformBuffers: uint32_t = 90
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
            maxDescriptorSetStorageBuffers: uint32_t = 1048576
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages:  uint32_t = 1048576
            maxDescriptorSetStorageImages:  uint32_t = 1048576
            maxDescriptorSetInputAttachments: uint32_t = 1048576
            maxVertexInputAttributes:       uint32_t = 32
            maxVertexInputBindings:         uint32_t = 32
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 2048
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4216
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 128
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 1024
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 16
            maxComputeSharedMemorySize:     uint32_t = 49152
            maxComputeWorkGroupCount:       uint32_t[3] = 000000999A1A8A84
                maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                maxComputeWorkGroupCount[1]:    uint32_t = 65535
                maxComputeWorkGroupCount[2]:    uint32_t = 65535
            maxComputeWorkGroupInvocations: uint32_t = 1536
            maxComputeWorkGroupSize:        uint32_t[3] = 000000999A1A8A94
                maxComputeWorkGroupSize[0]:     uint32_t = 1536
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 64
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 8
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 15
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 000000999A1A8AC0
                maxViewportDimensions[0]:       uint32_t = 32768
                maxViewportDimensions[1]:       uint32_t = 32768
            viewportBoundsRange:            float[2] = 000000999A1A8AC8
                viewportBoundsRange[0]:         float = -65536
                viewportBoundsRange[1]:         float = 65536
            viewportSubPixelBits:           uint32_t = 8
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 256
            minStorageBufferOffsetAlignment: VkDeviceSize = 32
            minTexelOffset:                 int32_t = -8
            maxTexelOffset:                 uint32_t = 7
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -0.5
            maxInterpolationOffset:         float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:            uint32_t = 32768
            maxFramebufferHeight:           uint32_t = 32768
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 1
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 000000999A1A8B64
                pointSizeRange[0]:              float = 1
                pointSizeRange[1]:              float = 189.875
            lineWidthRange:                 float[2] = 000000999A1A8B6C
                lineWidthRange[0]:              float = 0.5
                lineWidthRange[1]:              float = 10
            pointSizeGranularity:           float = 0.125
            lineWidthGranularity:           float = 0.125
            strictLines:                    VkBool32 = 1
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
            nonCoherentAtomSize:            VkDeviceSize = 64
        sparseProperties:               VkPhysicalDeviceSparseProperties = 000000999A1A8BA0:
            residencyStandard2DBlockShape:  VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape:  VkBool32 = 1
            residencyAlignedMipSize:        VkBool32 = 0
            residencyNonResidentStrict:     VkBool32 = 1

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001D019845820
    pPhysicalDeviceCount:           uint32_t* = 2
    pPhysicalDevices:               VkPhysicalDevice* = NULL

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001D019845820
    pPhysicalDeviceCount:           uint32_t* = 2
    pPhysicalDevices:               VkPhysicalDevice* = 000001D019893B30
        pPhysicalDevices[0]:            VkPhysicalDevice = 000001D01C5CE210
        pPhysicalDevices[1]:            VkPhysicalDevice = 000001D01C5CE450

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001D01C5CE210
    pProperties:                    VkPhysicalDeviceProperties* = 000000999A1A8870:
        apiVersion:                     uint32_t = 4194360
        driverVersion:                  uint32_t = 65538
        vendorID:                       uint32_t = 32902
        deviceID:                       uint32_t = 22806
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU (1)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "Intel(R) HD Graphics 620"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 000000999A1A8984
            pipelineCacheUUID[0]:           uint8_t = 213
            pipelineCacheUUID[1]:           uint8_t = 42
            pipelineCacheUUID[2]:           uint8_t = 208
            pipelineCacheUUID[3]:           uint8_t = 37
            pipelineCacheUUID[4]:           uint8_t = 220
            pipelineCacheUUID[5]:           uint8_t = 36
            pipelineCacheUUID[6]:           uint8_t = 226
            pipelineCacheUUID[7]:           uint8_t = 43
            pipelineCacheUUID[8]:           uint8_t = 222
            pipelineCacheUUID[9]:           uint8_t = 37
            pipelineCacheUUID[10]:          uint8_t = 216
            pipelineCacheUUID[11]:          uint8_t = 41
            pipelineCacheUUID[12]:          uint8_t = 222
            pipelineCacheUUID[13]:          uint8_t = 44
            pipelineCacheUUID[14]:          uint8_t = 160
            pipelineCacheUUID[15]:          uint8_t = 27
        limits:                         VkPhysicalDeviceLimits = 000000999A1A8998:
            maxImageDimension1D:            uint32_t = 16384
            maxImageDimension2D:            uint32_t = 16384
            maxImageDimension3D:            uint32_t = 2048
            maxImageDimensionCube:          uint32_t = 16384
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 65536
            maxStorageBufferRange:          uint32_t = 134217728
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 161063336
            maxSamplerAllocationCount:      uint32_t = 4000
            bufferImageGranularity:         VkDeviceSize = 1
            sparseAddressSpaceSize:         VkDeviceSize = 17592186044416
            maxBoundDescriptorSets:         uint32_t = 8
            maxPerStageDescriptorSamplers:  uint32_t = 64
            maxPerStageDescriptorUniformBuffers: uint32_t = 200
            maxPerStageDescriptorStorageBuffers: uint32_t = 200
            maxPerStageDescriptorSampledImages: uint32_t = 200
            maxPerStageDescriptorStorageImages: uint32_t = 16
            maxPerStageDescriptorInputAttachments: uint32_t = 8
            maxPerStageResources:           uint32_t = 200
            maxDescriptorSetSamplers:       uint32_t = 384
            maxDescriptorSetUniformBuffers: uint32_t = 1200
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 16
            maxDescriptorSetStorageBuffers: uint32_t = 1200
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages:  uint32_t = 1200
            maxDescriptorSetStorageImages:  uint32_t = 96
            maxDescriptorSetInputAttachments: uint32_t = 8
            maxVertexInputAttributes:       uint32_t = 16
            maxVertexInputBindings:         uint32_t = 16
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 4095
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4096
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 128
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 256
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 16
            maxComputeSharedMemorySize:     uint32_t = 32768
            maxComputeWorkGroupCount:       uint32_t[3] = 000000999A1A8A74
                maxComputeWorkGroupCount[0]:    uint32_t = 65536
                maxComputeWorkGroupCount[1]:    uint32_t = 65536
                maxComputeWorkGroupCount[2]:    uint32_t = 65536
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize:        uint32_t[3] = 000000999A1A8A84
                maxComputeWorkGroupSize[0]:     uint32_t = 1024
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 64
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 8
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 16
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 000000999A1A8AB0
                maxViewportDimensions[0]:       uint32_t = 32768
                maxViewportDimensions[1]:       uint32_t = 32768
            viewportBoundsRange:            float[2] = 000000999A1A8AB8
                viewportBoundsRange[0]:         float = -65536
                viewportBoundsRange[1]:         float = 65535
            viewportSubPixelBits:           uint32_t = 8
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 32
            minStorageBufferOffsetAlignment: VkDeviceSize = 16
            minTexelOffset:                 int32_t = -8
            maxTexelOffset:                 uint32_t = 7
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -0.5
            maxInterpolationOffset:         float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:            uint32_t = 16384
            maxFramebufferHeight:           uint32_t = 16384
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 83
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 000000999A1A8B54
                pointSizeRange[0]:              float = 0.125
                pointSizeRange[1]:              float = 255.875
            lineWidthRange:                 float[2] = 000000999A1A8B5C
                lineWidthRange[0]:              float = 0
                lineWidthRange[1]:              float = 7.99219
            pointSizeGranularity:           float = 0.125
            lineWidthGranularity:           float = 0.0078125
            strictLines:                    VkBool32 = 0
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 16
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 16
            nonCoherentAtomSize:            VkDeviceSize = 1
        sparseProperties:               VkPhysicalDeviceSparseProperties = 000000999A1A8B90:
            residencyStandard2DBlockShape:  VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape:  VkBool32 = 1
            residencyAlignedMipSize:        VkBool32 = 0
            residencyNonResidentStrict:     VkBool32 = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001D01C5CE450
    pProperties:                    VkPhysicalDeviceProperties* = 000000999A1A8870:
        apiVersion:                     uint32_t = 4198470
        driverVersion:                  uint32_t = 1669513216
        vendorID:                       uint32_t = 4318
        deviceID:                       uint32_t = 7041
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "GeForce GTX 1070"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 000000999A1A8984
            pipelineCacheUUID[0]:           uint8_t = 101
            pipelineCacheUUID[1]:           uint8_t = 12
            pipelineCacheUUID[2]:           uint8_t = 50
            pipelineCacheUUID[3]:           uint8_t = 54
            pipelineCacheUUID[4]:           uint8_t = 45
            pipelineCacheUUID[5]:           uint8_t = 186
            pipelineCacheUUID[6]:           uint8_t = 188
            pipelineCacheUUID[7]:           uint8_t = 117
            pipelineCacheUUID[8]:           uint8_t = 20
            pipelineCacheUUID[9]:           uint8_t = 6
            pipelineCacheUUID[10]:          uint8_t = 31
            pipelineCacheUUID[11]:          uint8_t = 42
            pipelineCacheUUID[12]:          uint8_t = 74
            pipelineCacheUUID[13]:          uint8_t = 200
            pipelineCacheUUID[14]:          uint8_t = 124
            pipelineCacheUUID[15]:          uint8_t = 156
        limits:                         VkPhysicalDeviceLimits = 000000999A1A8998:
            maxImageDimension1D:            uint32_t = 32768
            maxImageDimension2D:            uint32_t = 32768
            maxImageDimension3D:            uint32_t = 16384
            maxImageDimensionCube:          uint32_t = 32768
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 65536
            maxStorageBufferRange:          uint32_t = 4294967295
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 4096
            maxSamplerAllocationCount:      uint32_t = 4000
            bufferImageGranularity:         VkDeviceSize = 1024
            sparseAddressSpaceSize:         VkDeviceSize = 18446744073709551615
            maxBoundDescriptorSets:         uint32_t = 8
            maxPerStageDescriptorSamplers:  uint32_t = 1048576
            maxPerStageDescriptorUniformBuffers: uint32_t = 15
            maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
            maxPerStageDescriptorSampledImages: uint32_t = 1048576
            maxPerStageDescriptorStorageImages: uint32_t = 1048576
            maxPerStageDescriptorInputAttachments: uint32_t = 1048576
            maxPerStageResources:           uint32_t = 4294967295
            maxDescriptorSetSamplers:       uint32_t = 1048576
            maxDescriptorSetUniformBuffers: uint32_t = 90
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
            maxDescriptorSetStorageBuffers: uint32_t = 1048576
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages:  uint32_t = 1048576
            maxDescriptorSetStorageImages:  uint32_t = 1048576
            maxDescriptorSetInputAttachments: uint32_t = 1048576
            maxVertexInputAttributes:       uint32_t = 32
            maxVertexInputBindings:         uint32_t = 32
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 2048
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4216
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 128
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 1024
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 16
            maxComputeSharedMemorySize:     uint32_t = 49152
            maxComputeWorkGroupCount:       uint32_t[3] = 000000999A1A8A74
                maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                maxComputeWorkGroupCount[1]:    uint32_t = 65535
                maxComputeWorkGroupCount[2]:    uint32_t = 65535
            maxComputeWorkGroupInvocations: uint32_t = 1536
            maxComputeWorkGroupSize:        uint32_t[3] = 000000999A1A8A84
                maxComputeWorkGroupSize[0]:     uint32_t = 1536
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 64
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 8
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 15
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 000000999A1A8AB0
                maxViewportDimensions[0]:       uint32_t = 32768
                maxViewportDimensions[1]:       uint32_t = 32768
            viewportBoundsRange:            float[2] = 000000999A1A8AB8
                viewportBoundsRange[0]:         float = -65536
                viewportBoundsRange[1]:         float = 65536
            viewportSubPixelBits:           uint32_t = 8
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 256
            minStorageBufferOffsetAlignment: VkDeviceSize = 32
            minTexelOffset:                 int32_t = -8
            maxTexelOffset:                 uint32_t = 7
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -0.5
            maxInterpolationOffset:         float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:            uint32_t = 32768
            maxFramebufferHeight:           uint32_t = 32768
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 1
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 000000999A1A8B54
                pointSizeRange[0]:              float = 1
                pointSizeRange[1]:              float = 189.875
            lineWidthRange:                 float[2] = 000000999A1A8B5C
                lineWidthRange[0]:              float = 0.5
                lineWidthRange[1]:              float = 10
            pointSizeGranularity:           float = 0.125
            lineWidthGranularity:           float = 0.125
            strictLines:                    VkBool32 = 1
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
            nonCoherentAtomSize:            VkDeviceSize = 64
        sparseProperties:               VkPhysicalDeviceSparseProperties = 000000999A1A8B90:
            residencyStandard2DBlockShape:  VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape:  VkBool32 = 1
            residencyAlignedMipSize:        VkBool32 = 0
            residencyNonResidentStrict:     VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001D01C5CE450
    pProperties:                    VkPhysicalDeviceProperties* = 000000999A1A8870:
        apiVersion:                     uint32_t = 4198470
        driverVersion:                  uint32_t = 1669513216
        vendorID:                       uint32_t = 4318
        deviceID:                       uint32_t = 7041
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "GeForce GTX 1070"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 000000999A1A8984
            pipelineCacheUUID[0]:           uint8_t = 101
            pipelineCacheUUID[1]:           uint8_t = 12
            pipelineCacheUUID[2]:           uint8_t = 50
            pipelineCacheUUID[3]:           uint8_t = 54
            pipelineCacheUUID[4]:           uint8_t = 45
            pipelineCacheUUID[5]:           uint8_t = 186
            pipelineCacheUUID[6]:           uint8_t = 188
            pipelineCacheUUID[7]:           uint8_t = 117
            pipelineCacheUUID[8]:           uint8_t = 20
            pipelineCacheUUID[9]:           uint8_t = 6
            pipelineCacheUUID[10]:          uint8_t = 31
            pipelineCacheUUID[11]:          uint8_t = 42
            pipelineCacheUUID[12]:          uint8_t = 74
            pipelineCacheUUID[13]:          uint8_t = 200
            pipelineCacheUUID[14]:          uint8_t = 124
            pipelineCacheUUID[15]:          uint8_t = 156
        limits:                         VkPhysicalDeviceLimits = 000000999A1A8998:
            maxImageDimension1D:            uint32_t = 32768
            maxImageDimension2D:            uint32_t = 32768
            maxImageDimension3D:            uint32_t = 16384
            maxImageDimensionCube:          uint32_t = 32768
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 65536
            maxStorageBufferRange:          uint32_t = 4294967295
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 4096
            maxSamplerAllocationCount:      uint32_t = 4000
            bufferImageGranularity:         VkDeviceSize = 1024
            sparseAddressSpaceSize:         VkDeviceSize = 18446744073709551615
            maxBoundDescriptorSets:         uint32_t = 8
            maxPerStageDescriptorSamplers:  uint32_t = 1048576
            maxPerStageDescriptorUniformBuffers: uint32_t = 15
            maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
            maxPerStageDescriptorSampledImages: uint32_t = 1048576
            maxPerStageDescriptorStorageImages: uint32_t = 1048576
            maxPerStageDescriptorInputAttachments: uint32_t = 1048576
            maxPerStageResources:           uint32_t = 4294967295
            maxDescriptorSetSamplers:       uint32_t = 1048576
            maxDescriptorSetUniformBuffers: uint32_t = 90
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
            maxDescriptorSetStorageBuffers: uint32_t = 1048576
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages:  uint32_t = 1048576
            maxDescriptorSetStorageImages:  uint32_t = 1048576
            maxDescriptorSetInputAttachments: uint32_t = 1048576
            maxVertexInputAttributes:       uint32_t = 32
            maxVertexInputBindings:         uint32_t = 32
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 2048
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4216
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 128
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 1024
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 16
            maxComputeSharedMemorySize:     uint32_t = 49152
            maxComputeWorkGroupCount:       uint32_t[3] = 000000999A1A8A74
                maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                maxComputeWorkGroupCount[1]:    uint32_t = 65535
                maxComputeWorkGroupCount[2]:    uint32_t = 65535
            maxComputeWorkGroupInvocations: uint32_t = 1536
            maxComputeWorkGroupSize:        uint32_t[3] = 000000999A1A8A84
                maxComputeWorkGroupSize[0]:     uint32_t = 1536
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 64
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 8
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 15
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 000000999A1A8AB0
                maxViewportDimensions[0]:       uint32_t = 32768
                maxViewportDimensions[1]:       uint32_t = 32768
            viewportBoundsRange:            float[2] = 000000999A1A8AB8
                viewportBoundsRange[0]:         float = -65536
                viewportBoundsRange[1]:         float = 65536
            viewportSubPixelBits:           uint32_t = 8
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 256
            minStorageBufferOffsetAlignment: VkDeviceSize = 32
            minTexelOffset:                 int32_t = -8
            maxTexelOffset:                 uint32_t = 7
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -0.5
            maxInterpolationOffset:         float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:            uint32_t = 32768
            maxFramebufferHeight:           uint32_t = 32768
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 1
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 000000999A1A8B54
                pointSizeRange[0]:              float = 1
                pointSizeRange[1]:              float = 189.875
            lineWidthRange:                 float[2] = 000000999A1A8B5C
                lineWidthRange[0]:              float = 0.5
                lineWidthRange[1]:              float = 10
            pointSizeGranularity:           float = 0.125
            lineWidthGranularity:           float = 0.125
            strictLines:                    VkBool32 = 1
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
            nonCoherentAtomSize:            VkDeviceSize = 64
        sparseProperties:               VkPhysicalDeviceSparseProperties = 000000999A1A8B90:
            residencyStandard2DBlockShape:  VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape:  VkBool32 = 1
            residencyAlignedMipSize:        VkBool32 = 0
            residencyNonResidentStrict:     VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001D01C5CE450
    pQueueFamilyPropertyCount:      uint32_t* = 3
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001D01C5CE450
    pQueueFamilyPropertyCount:      uint32_t* = 3
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 000001D019890420
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 000001D019890420:
            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 16
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001D01989042C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 000001D019890438:
            queueFlags:                     VkQueueFlags = 4 (VK_QUEUE_TRANSFER_BIT)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001D019890444:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[2]:      VkQueueFamilyProperties = 000001D019890450:
            queueFlags:                     VkQueueFlags = 2 (VK_QUEUE_COMPUTE_BIT)
            queueCount:                     uint32_t = 8
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001D01989045C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkCreateWin32SurfaceKHR(instance, pCreateInfo, pAllocator, pSurface) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001D019845820
    pCreateInfo:                    const VkWin32SurfaceCreateInfoKHR* = 000000999A1A8D70:
        sType:                          VkStructureType = UNKNOWN (1000009000)
        pNext:                          const void* = NULL
        flags:                          VkWin32SurfaceCreateFlagsKHR = 0
        hinstance:                      HINSTANCE = 00007FF7FB570000
        hwnd:                           HWND = 00000000001F08A2
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSurface:                       VkSurfaceKHR* = 000001D01C3691C0

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001D01C5CE450
    surface:                        VkSurfaceKHR = 000001D01C3691C0
    pSurfaceCapabilities:           VkSurfaceCapabilitiesKHR* = 000000999A1A89B8:
        minImageCount:                  uint32_t = 2
        maxImageCount:                  uint32_t = 8
        currentExtent:                  VkExtent2D = 000000999A1A89C0:
            width:                          uint32_t = 900
            height:                         uint32_t = 900
        minImageExtent:                 VkExtent2D = 000000999A1A89C8:
            width:                          uint32_t = 900
            height:                         uint32_t = 900
        maxImageExtent:                 VkExtent2D = 000000999A1A89D0:
            width:                          uint32_t = 900
            height:                         uint32_t = 900
        maxImageArrayLayers:            uint32_t = 1
        supportedTransforms:            VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        currentTransform:               VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        supportedCompositeAlpha:        VkCompositeAlphaFlagsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)
        supportedUsageFlags:            VkImageUsageFlags = 159 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001D01C5CE450
    surface:                        VkSurfaceKHR = 000001D01C3691C0
    pSurfaceFormatCount:            uint32_t* = 2
    pSurfaceFormats:                VkSurfaceFormatKHR* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001D01C5CE450
    surface:                        VkSurfaceKHR = 000001D01C3691C0
    pSurfaceFormatCount:            uint32_t* = 2
    pSurfaceFormats:                VkSurfaceFormatKHR* = 000001D01C368D40
        pSurfaceFormats[0]:             VkSurfaceFormatKHR = 000001D01C368D40:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[1]:             VkSurfaceFormatKHR = 000001D01C368D48:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001D01C5CE450
    surface:                        VkSurfaceKHR = 000001D01C3691C0
    pPresentModeCount:              uint32_t* = 3
    pPresentModes:                  VkPresentModeKHR* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001D01C5CE450
    surface:                        VkSurfaceKHR = 000001D01C3691C0
    pPresentModeCount:              uint32_t* = 3
    pPresentModes:                  VkPresentModeKHR* = 000001D01C3688E0
        pPresentModes[0]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_KHR (2)
        pPresentModes[1]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_RELAXED_KHR (3)
        pPresentModes[2]:               VkPresentModeKHR = VK_PRESENT_MODE_MAILBOX_KHR (1)

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001D01C5CE450
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = 000001D01C3691C0
    pSupported:                     VkBool32* = 1

Thread 0, Frame 0:
vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001D01C5CE450
    pCreateInfo:                    const VkDeviceCreateInfo* = 000000999A1A8B60:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO (3)
        pNext:                          const void* = 000000999A1A8B38
        flags:                          VkDeviceCreateFlags = 0
        queueCreateInfoCount:           uint32_t = 1
        pQueueCreateInfos:              const VkDeviceQueueCreateInfo* = 000001D01C5AA310
            pQueueCreateInfos[0]:           const VkDeviceQueueCreateInfo = 000001D01C5AA310:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO (2)
                pNext:                          const void* = NULL
                flags:                          VkDeviceQueueCreateFlags = 0
                queueFamilyIndex:               uint32_t = 0
                queueCount:                     uint32_t = 1
                pQueuePriorities:               const float* = 00007FF7FB7E0228
                    pQueuePriorities[0]:            const float = 0
        enabledLayerCount:              uint32_t = 0
        ppEnabledLayerNames:            const char* const* = NULL
        enabledExtensionCount:          uint32_t = 1
        ppEnabledExtensionNames:        const char* const* = 000001D01C366EF0
            ppEnabledExtensionNames[0]:     const char* const = "VK_KHR_swapchain"
        pEnabledFeatures:               const VkPhysicalDeviceFeatures* = NULL
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pDevice:                        VkDevice* = 000001D01C6A9420

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001D01C6A9420
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001D01EC1B480

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001D01C5CE450
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 000000999A1A8C10:
        memoryTypeCount:                uint32_t = 11
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 000000999A1A8C14
            memoryTypes[0]:                 VkMemoryType = 000000999A1A8C14:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[1]:                 VkMemoryType = 000000999A1A8C1C:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[2]:                 VkMemoryType = 000000999A1A8C24:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[3]:                 VkMemoryType = 000000999A1A8C2C:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[4]:                 VkMemoryType = 000000999A1A8C34:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[5]:                 VkMemoryType = 000000999A1A8C3C:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[6]:                 VkMemoryType = 000000999A1A8C44:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[7]:                 VkMemoryType = 000000999A1A8C4C:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[8]:                 VkMemoryType = 000000999A1A8C54:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[9]:                 VkMemoryType = 000000999A1A8C5C:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[10]:                VkMemoryType = 000000999A1A8C64:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[11]:                VkMemoryType = 000000999A1A8C6C:
                propertyFlags:                  VkMemoryPropertyFlags = -858993460 (VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 3435973836
            memoryTypes[12]:                VkMemoryType = 000000999A1A8C74:
                propertyFlags:                  VkMemoryPropertyFlags = -858993460 (VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 3435973836
            memoryTypes[13]:                VkMemoryType = 000000999A1A8C7C:
                propertyFlags:                  VkMemoryPropertyFlags = -858993460 (VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 3435973836
            memoryTypes[14]:                VkMemoryType = 000000999A1A8C84:
                propertyFlags:                  VkMemoryPropertyFlags = -858993460 (VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 3435973836
            memoryTypes[15]:                VkMemoryType = 000000999A1A8C8C:
                propertyFlags:                  VkMemoryPropertyFlags = -858993460 (VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 3435973836
            memoryTypes[16]:                VkMemoryType = 000000999A1A8C94:
                propertyFlags:                  VkMemoryPropertyFlags = -858993460 (VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 3435973836
            memoryTypes[17]:                VkMemoryType = 000000999A1A8C9C:
                propertyFlags:                  VkMemoryPropertyFlags = -858993460 (VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 3435973836
            memoryTypes[18]:                VkMemoryType = 000000999A1A8CA4:
                propertyFlags:                  VkMemoryPropertyFlags = -858993460 (VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 3435973836
            memoryTypes[19]:                VkMemoryType = 000000999A1A8CAC:
                propertyFlags:                  VkMemoryPropertyFlags = -858993460 (VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 3435973836
            memoryTypes[20]:                VkMemoryType = 000000999A1A8CB4:
                propertyFlags:                  VkMemoryPropertyFlags = -858993460 (VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 3435973836
            memoryTypes[21]:                VkMemoryType = 000000999A1A8CBC:
                propertyFlags:                  VkMemoryPropertyFlags = -858993460 (VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 3435973836
            memoryTypes[22]:                VkMemoryType = 000000999A1A8CC4:
                propertyFlags:                  VkMemoryPropertyFlags = -858993460 (VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 3435973836
            memoryTypes[23]:                VkMemoryType = 000000999A1A8CCC:
                propertyFlags:                  VkMemoryPropertyFlags = -858993460 (VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 3435973836
            memoryTypes[24]:                VkMemoryType = 000000999A1A8CD4:
                propertyFlags:                  VkMemoryPropertyFlags = -858993460 (VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 3435973836
            memoryTypes[25]:                VkMemoryType = 000000999A1A8CDC:
                propertyFlags:                  VkMemoryPropertyFlags = -858993460 (VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 3435973836
            memoryTypes[26]:                VkMemoryType = 000000999A1A8CE4:
                propertyFlags:                  VkMemoryPropertyFlags = -858993460 (VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 3435973836
            memoryTypes[27]:                VkMemoryType = 000000999A1A8CEC:
                propertyFlags:                  VkMemoryPropertyFlags = -858993460 (VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 3435973836
            memoryTypes[28]:                VkMemoryType = 000000999A1A8CF4:
                propertyFlags:                  VkMemoryPropertyFlags = -858993460 (VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 3435973836
            memoryTypes[29]:                VkMemoryType = 000000999A1A8CFC:
                propertyFlags:                  VkMemoryPropertyFlags = -858993460 (VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 3435973836
            memoryTypes[30]:                VkMemoryType = 000000999A1A8D04:
                propertyFlags:                  VkMemoryPropertyFlags = -858993460 (VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 3435973836
            memoryTypes[31]:                VkMemoryType = 000000999A1A8D0C:
                propertyFlags:                  VkMemoryPropertyFlags = -858993460 (VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 3435973836
        memoryHeapCount:                uint32_t = 2
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 000000999A1A8D18
            memoryHeaps[0]:                 VkMemoryHeap = 000000999A1A8D18:
                size:                           VkDeviceSize = 8480882688
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 000000999A1A8D28:
                size:                           VkDeviceSize = 17051942912
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[2]:                 VkMemoryHeap = 000000999A1A8D38:
                size:                           VkDeviceSize = 14757395258967641292
                flags:                          VkMemoryHeapFlags = -858993460
            memoryHeaps[3]:                 VkMemoryHeap = 000000999A1A8D48:
                size:                           VkDeviceSize = 14757395258967641292
                flags:                          VkMemoryHeapFlags = -858993460
            memoryHeaps[4]:                 VkMemoryHeap = 000000999A1A8D58:
                size:                           VkDeviceSize = 14757395258967641292
                flags:                          VkMemoryHeapFlags = -858993460
            memoryHeaps[5]:                 VkMemoryHeap = 000000999A1A8D68:
                size:                           VkDeviceSize = 14757395258967641292
                flags:                          VkMemoryHeapFlags = -858993460
            memoryHeaps[6]:                 VkMemoryHeap = 000000999A1A8D78:
                size:                           VkDeviceSize = 14757395258967641292
                flags:                          VkMemoryHeapFlags = -858993460
            memoryHeaps[7]:                 VkMemoryHeap = 000000999A1A8D88:
                size:                           VkDeviceSize = 14757395258967641292
                flags:                          VkMemoryHeapFlags = -858993460
            memoryHeaps[8]:                 VkMemoryHeap = 000000999A1A8D98:
                size:                           VkDeviceSize = 14757395258967641292
                flags:                          VkMemoryHeapFlags = -858993460
            memoryHeaps[9]:                 VkMemoryHeap = 000000999A1A8DA8:
                size:                           VkDeviceSize = 14757395258967641292
                flags:                          VkMemoryHeapFlags = -858993460
            memoryHeaps[10]:                VkMemoryHeap = 000000999A1A8DB8:
                size:                           VkDeviceSize = 14757395258967641292
                flags:                          VkMemoryHeapFlags = -858993460
            memoryHeaps[11]:                VkMemoryHeap = 000000999A1A8DC8:
                size:                           VkDeviceSize = 14757395258967641292
                flags:                          VkMemoryHeapFlags = -858993460
            memoryHeaps[12]:                VkMemoryHeap = 000000999A1A8DD8:
                size:                           VkDeviceSize = 14757395258967641292
                flags:                          VkMemoryHeapFlags = -858993460
            memoryHeaps[13]:                VkMemoryHeap = 000000999A1A8DE8:
                size:                           VkDeviceSize = 14757395258967641292
                flags:                          VkMemoryHeapFlags = -858993460
            memoryHeaps[14]:                VkMemoryHeap = 000000999A1A8DF8:
                size:                           VkDeviceSize = 14757395258967641292
                flags:                          VkMemoryHeapFlags = -858993460
            memoryHeaps[15]:                VkMemoryHeap = 000000999A1A8E08:
                size:                           VkDeviceSize = 14757395258967641292
                flags:                          VkMemoryHeapFlags = -858993460

Thread 0, Frame 0:
vkCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pCreateInfo:                    const VkRenderPassCreateInfo* = 000000999A1A8DA8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO (38)
        pNext:                          const void* = NULL
        flags:                          VkRenderPassCreateFlags = 0
        attachmentCount:                uint32_t = 1
        pAttachments:                   const VkAttachmentDescription* = 000000999A1A8CFC
            pAttachments[0]:                const VkAttachmentDescription = 000000999A1A8CFC:
                flags:                          VkAttachmentDescriptionFlags = 0
                format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
                samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
                loadOp:                         VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:                        VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                stencilLoadOp:                  VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE (2)
                stencilStoreOp:                 VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE (1)
                initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                finalLayout:                    VkImageLayout = UNKNOWN (1000001002)
        subpassCount:                   uint32_t = 1
        pSubpasses:                     const VkSubpassDescription* = 000000999A1A8D28
            pSubpasses[0]:                  const VkSubpassDescription = 000000999A1A8D28:
                flags:                          VkSubpassDescriptionFlags = 0
                pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
                inputAttachmentCount:           uint32_t = 0
                pInputAttachments:              const VkAttachmentReference* = NULL
                colorAttachmentCount:           uint32_t = 1
                pColorAttachments:              const VkAttachmentReference* = 000000999A1A8D20
                    pColorAttachments[0]:           const VkAttachmentReference = 000000999A1A8D20:
                        attachment:                     uint32_t = 0
                        layout:                         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                pResolveAttachments:            const VkAttachmentReference* = NULL
                pDepthStencilAttachment:        const VkAttachmentReference* = NULL
                preserveAttachmentCount:        uint32_t = 0
                pPreserveAttachments:           const uint32_t* = NULL
        dependencyCount:                uint32_t = 2
        pDependencies:                  const VkSubpassDependency* = 000000999A1A8D70
            pDependencies[0]:               const VkSubpassDependency = 000000999A1A8D70:
                srcSubpass:                     uint32_t = 0
                dstSubpass:                     uint32_t = 0
                srcStageMask:                   VkPipelineStageFlags = 8192 (VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
                dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
                srcAccessMask:                  VkAccessFlags = 32768 (VK_ACCESS_MEMORY_READ_BIT)
                dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
                dependencyFlags:                VkDependencyFlags = 1 (VK_DEPENDENCY_BY_REGION_BIT)
            pDependencies[1]:               const VkSubpassDependency = 000000999A1A8D8C:
                srcSubpass:                     uint32_t = 0
                dstSubpass:                     uint32_t = 0
                srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
                dstStageMask:                   VkPipelineStageFlags = 8192 (VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
                srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
                dstAccessMask:                  VkAccessFlags = 32768 (VK_ACCESS_MEMORY_READ_BIT)
                dependencyFlags:                VkDependencyFlags = 1 (VK_DEPENDENCY_BY_REGION_BIT)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pRenderPass:                    VkRenderPass* = 000001D0198433C0

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001D01C5CE450
    surface:                        VkSurfaceKHR = 000001D01C3691C0
    pSurfaceCapabilities:           VkSurfaceCapabilitiesKHR* = 000000999A1A8908:
        minImageCount:                  uint32_t = 2
        maxImageCount:                  uint32_t = 8
        currentExtent:                  VkExtent2D = 000000999A1A8910:
            width:                          uint32_t = 900
            height:                         uint32_t = 900
        minImageExtent:                 VkExtent2D = 000000999A1A8918:
            width:                          uint32_t = 900
            height:                         uint32_t = 900
        maxImageExtent:                 VkExtent2D = 000000999A1A8920:
            width:                          uint32_t = 900
            height:                         uint32_t = 900
        maxImageArrayLayers:            uint32_t = 1
        supportedTransforms:            VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        currentTransform:               VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        supportedCompositeAlpha:        VkCompositeAlphaFlagsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)
        supportedUsageFlags:            VkImageUsageFlags = 159 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT)

Thread 0, Frame 0:
vkCreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pCreateInfo:                    const VkSwapchainCreateInfoKHR* = 000000999A1A8CF0:
        sType:                          VkStructureType = UNKNOWN (1000001000)
        pNext:                          const void* = NULL
        flags:                          VkSwapchainCreateFlagsKHR = 0
        surface:                        VkSurfaceKHR = 000001D01C3691C0
        minImageCount:                  uint32_t = 3
        imageFormat:                    VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
        imageColorSpace:                VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        imageExtent:                    VkExtent2D = 000000999A1A8D1C:
            width:                          uint32_t = 900
            height:                         uint32_t = 900
        imageArrayLayers:               uint32_t = 1
        imageUsage:                     VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        imageSharingMode:               VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
        preTransform:                   VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        compositeAlpha:                 VkCompositeAlphaFlagBitsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)
        presentMode:                    VkPresentModeKHR = VK_PRESENT_MODE_MAILBOX_KHR (1)
        clipped:                        VkBool32 = 0
        oldSwapchain:                   VkSwapchainKHR = 0000000000000000
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSwapchain:                     VkSwapchainKHR* = 000001D01EE5B758

Thread 0, Frame 0:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    swapchain:                      VkSwapchainKHR = 000001D01EE5B758
    pSwapchainImageCount:           uint32_t* = 3
    pSwapchainImages:               VkImage* = NULL

Thread 0, Frame 0:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    swapchain:                      VkSwapchainKHR = 000001D01EE5B758
    pSwapchainImageCount:           uint32_t* = 3
    pSwapchainImages:               VkImage* = 000001D01EE2D460
        pSwapchainImages[0]:            VkImage = 000001D0198BEE40
        pSwapchainImages[1]:            VkImage = 000001D01C36B9E0
        pSwapchainImages[2]:            VkImage = 000001D01987B990

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pCreateInfo:                    const VkImageViewCreateInfo* = 000000999A1A8850:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = NULL
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 000001D0198BEE40
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
        components:                     VkComponentMapping = 000000999A1A8878:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 000000999A1A8888:
            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = 000001D01C3E6390

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pCreateInfo:                    const VkImageViewCreateInfo* = 000000999A1A8850:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = NULL
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 000001D01C36B9E0
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
        components:                     VkComponentMapping = 000000999A1A8878:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 000000999A1A8888:
            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = 000001D01C3E7970

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pCreateInfo:                    const VkImageViewCreateInfo* = 000000999A1A8850:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = NULL
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 000001D01987B990
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
        components:                     VkComponentMapping = 000000999A1A8878:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 000000999A1A8888:
            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = 000001D01C3E66B0

Thread 0, Frame 0:
vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pCreateInfo:                    const VkFramebufferCreateInfo* = 000000999A1A8840:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO (37)
        pNext:                          const void* = NULL
        flags:                          VkFramebufferCreateFlags = 0
        renderPass:                     VkRenderPass = 000001D0198433C0
        attachmentCount:                uint32_t = 1
        pAttachments:                   const VkImageView* = 000000999A1A88B8
            pAttachments[0]:                const VkImageView = 000001D01C3E6390
        width:                          uint32_t = 900
        height:                         uint32_t = 900
        layers:                         uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFramebuffer:                   VkFramebuffer* = 000001D01C3E27C0

Thread 0, Frame 0:
vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pCreateInfo:                    const VkFramebufferCreateInfo* = 000000999A1A8840:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO (37)
        pNext:                          const void* = NULL
        flags:                          VkFramebufferCreateFlags = 0
        renderPass:                     VkRenderPass = 000001D0198433C0
        attachmentCount:                uint32_t = 1
        pAttachments:                   const VkImageView* = 000000999A1A88B8
            pAttachments[0]:                const VkImageView = 000001D01C3E7970
        width:                          uint32_t = 900
        height:                         uint32_t = 900
        layers:                         uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFramebuffer:                   VkFramebuffer* = 000001D01C3E2840

Thread 0, Frame 0:
vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pCreateInfo:                    const VkFramebufferCreateInfo* = 000000999A1A8840:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO (37)
        pNext:                          const void* = NULL
        flags:                          VkFramebufferCreateFlags = 0
        renderPass:                     VkRenderPass = 000001D0198433C0
        attachmentCount:                uint32_t = 1
        pAttachments:                   const VkImageView* = 000000999A1A88B8
            pAttachments[0]:                const VkImageView = 000001D01C3E66B0
        width:                          uint32_t = 900
        height:                         uint32_t = 900
        layers:                         uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFramebuffer:                   VkFramebuffer* = 000001D01983CD10

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pCreateInfo:                    const VkShaderModuleCreateInfo* = 000000999A1A8D48:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:                          const void* = NULL
        flags:                          VkShaderModuleCreateFlags = 0
        codeSize:                       size_t = 1184
        pCode:                          const uint32_t* = SHADER DATA
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pShaderModule:                  VkShaderModule* = 000001D01983CA10

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pCreateInfo:                    const VkShaderModuleCreateInfo* = 000000999A1A8D48:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:                          const void* = NULL
        flags:                          VkShaderModuleCreateFlags = 0
        codeSize:                       size_t = 1380
        pCode:                          const uint32_t* = SHADER DATA
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pShaderModule:                  VkShaderModule* = 000001D0198AB440

Thread 0, Frame 0:
vkCreateSampler(device, pCreateInfo, pAllocator, pSampler) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pCreateInfo:                    const VkSamplerCreateInfo* = 000000999A1A8CD0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO (31)
        pNext:                          const void* = NULL
        flags:                          VkSamplerCreateFlags = 0
        magFilter:                      VkFilter = VK_FILTER_LINEAR (1)
        minFilter:                      VkFilter = VK_FILTER_LINEAR (1)
        mipmapMode:                     VkSamplerMipmapMode = VK_SAMPLER_MIPMAP_MODE_LINEAR (1)
        addressModeU:                   VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_REPEAT (0)
        addressModeV:                   VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_REPEAT (0)
        addressModeW:                   VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_REPEAT (0)
        mipLodBias:                     float = 0
        anisotropyEnable:               VkBool32 = 0
        maxAnisotropy:                  float = 16
        compareEnable:                  VkBool32 = 0
        compareOp:                      VkCompareOp = VK_COMPARE_OP_NEVER (0)
        minLod:                         float = 0
        maxLod:                         float = 0
        borderColor:                    VkBorderColor = VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK (0)
        unnormalizedCoordinates:        VkBool32 = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSampler:                       VkSampler* = 000001D0197FB1B0

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pCreateInfo:                    const VkDescriptorSetLayoutCreateInfo* = 000000999A1A8B18:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:                          const void* = NULL
        flags:                          VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:                   uint32_t = 2
        pBindings:                      const VkDescriptorSetLayoutBinding* = 000001D01C5AAB60
            pBindings[0]:                   const VkDescriptorSetLayoutBinding = 000001D01C5AAB60:
                binding:                        uint32_t = 0
                descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLER (0)
                descriptorCount:                uint32_t = 1
                stageFlags:                     VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT | VK_SHADER_STAGE_ALL_GRAPHICS | VK_SHADER_STAGE_ALL)
                pImmutableSamplers:             const VkSampler* = 000000999A1AB138
                    pImmutableSamplers[0]:          const VkSampler = 000001D0197FB1B0
            pBindings[1]:                   const VkDescriptorSetLayoutBinding = 000001D01C5AAB78:
                binding:                        uint32_t = 1
                descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)
                descriptorCount:                uint32_t = 1
                stageFlags:                     VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT | VK_SHADER_STAGE_ALL_GRAPHICS | VK_SHADER_STAGE_ALL)
                pImmutableSamplers:             const VkSampler* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSetLayout:                     VkDescriptorSetLayout* = 000001D01C3E7D30

Thread 0, Frame 0:
vkCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pCreateInfo:                    const VkDescriptorPoolCreateInfo* = 000000999A1A8B48:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO (33)
        pNext:                          const void* = NULL
        flags:                          VkDescriptorPoolCreateFlags = 0
        maxSets:                        uint32_t = 1
        poolSizeCount:                  uint32_t = 2
        pPoolSizes:                     const VkDescriptorPoolSize* = 000001D01C369510
            pPoolSizes[0]:                  const VkDescriptorPoolSize = 000001D01C369510:
                type:                           VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLER (0)
                descriptorCount:                uint32_t = 1
            pPoolSizes[1]:                  const VkDescriptorPoolSize = 000001D01C369518:
                type:                           VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)
                descriptorCount:                uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pDescriptorPool:                VkDescriptorPool* = 000001D01C409DD0

Thread 0, Frame 0:
vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pCreateInfo:                    const VkPipelineLayoutCreateInfo* = 000000999A1A8CE0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO (30)
        pNext:                          const void* = NULL
        flags:                          VkPipelineLayoutCreateFlags = 0
        setLayoutCount:                 uint32_t = 1
        pSetLayouts:                    const VkDescriptorSetLayout* = 000001D01C368AC0
            pSetLayouts[0]:                 const VkDescriptorSetLayout = 000001D01C3E7D30
        pushConstantRangeCount:         uint32_t = 1
        pPushConstantRanges:            const VkPushConstantRange* = 000001D01C368200
            pPushConstantRanges[0]:         const VkPushConstantRange = 000001D01C368200:
                stageFlags:                     VkShaderStageFlags = 17 (VK_SHADER_STAGE_VERTEX_BIT | VK_SHADER_STAGE_FRAGMENT_BIT | VK_SHADER_STAGE_ALL_GRAPHICS | VK_SHADER_STAGE_ALL)
                offset:                         uint32_t = 0
                size:                           uint32_t = 96
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pPipelineLayout:                VkPipelineLayout* = 000001D01EE1D150

Thread 0, Frame 0:
vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pipelineCache:                  VkPipelineCache = 0000000000000000
    createInfoCount:                uint32_t = 1
    pCreateInfos:                   const VkGraphicsPipelineCreateInfo* = 000000999A1A8B10
        pCreateInfos[0]:                const VkGraphicsPipelineCreateInfo = 000000999A1A8B10:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO (28)
            pNext:                          const void* = NULL
            flags:                          VkPipelineCreateFlags = 0
            stageCount:                     uint32_t = 2
            pStages:                        const VkPipelineShaderStageCreateInfo* = 000001D01C3E7900
                pStages[0]:                     const VkPipelineShaderStageCreateInfo = 000001D01C3E7900:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                    pNext:                          const void* = NULL
                    flags:                          VkPipelineShaderStageCreateFlags = 0
                    stage:                          VkShaderStageFlagBits = 1 (VK_SHADER_STAGE_VERTEX_BIT | VK_SHADER_STAGE_ALL_GRAPHICS | VK_SHADER_STAGE_ALL)
                    module:                         VkShaderModule = 000001D01983CA10
                    pName:                          const char* = "main"
                    pSpecializationInfo:            const VkSpecializationInfo* = 000000999A1A8218:
                        mapEntryCount:                  uint32_t = 0
                        pMapEntries:                    const VkSpecializationMapEntry* = NULL
                        dataSize:                       size_t = 0
                        pData:                          const void* = NULL
                pStages[1]:                     const VkPipelineShaderStageCreateInfo = 000001D01C3E7930:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                    pNext:                          const void* = NULL
                    flags:                          VkPipelineShaderStageCreateFlags = 0
                    stage:                          VkShaderStageFlagBits = 16 (VK_SHADER_STAGE_FRAGMENT_BIT | VK_SHADER_STAGE_ALL_GRAPHICS | VK_SHADER_STAGE_ALL)
                    module:                         VkShaderModule = 000001D0198AB440
                    pName:                          const char* = "main"
                    pSpecializationInfo:            const VkSpecializationInfo* = 000000999A1A8258:
                        mapEntryCount:                  uint32_t = 1
                        pMapEntries:                    const VkSpecializationMapEntry* = 000001D01C3682F0
                            pMapEntries[0]:                 const VkSpecializationMapEntry = 000001D01C3682F0:
                                constantID:                     uint32_t = 0
                                offset:                         uint32_t = 0
                                size:                           size_t = 4
                        dataSize:                       size_t = 4
                        pData:                          const void* = 00007FF7FB7F49C8
            pVertexInputState:              const VkPipelineVertexInputStateCreateInfo* = 000000999A1A7DE8:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO (19)
                pNext:                          const void* = NULL
                flags:                          VkPipelineVertexInputStateCreateFlags = 0
                vertexBindingDescriptionCount:  uint32_t = 1
                pVertexBindingDescriptions:     const VkVertexInputBindingDescription* = 000001D01C368610
                    pVertexBindingDescriptions[0]:  const VkVertexInputBindingDescription = 000001D01C368610:
                        binding:                        uint32_t = 0
                        stride:                         uint32_t = 16
                        inputRate:                      VkVertexInputRate = VK_VERTEX_INPUT_RATE_VERTEX (0)
                vertexAttributeDescriptionCount: uint32_t = 2
                pVertexAttributeDescriptions:   const VkVertexInputAttributeDescription* = 000001D01EE2D280
                    pVertexAttributeDescriptions[0]: const VkVertexInputAttributeDescription = 000001D01EE2D280:
                        location:                       uint32_t = 0
                        binding:                        uint32_t = 0
                        format:                         VkFormat = VK_FORMAT_R32G32_SFLOAT (103)
                        offset:                         uint32_t = 0
                    pVertexAttributeDescriptions[1]: const VkVertexInputAttributeDescription = 000001D01EE2D290:
                        location:                       uint32_t = 1
                        binding:                        uint32_t = 0
                        format:                         VkFormat = VK_FORMAT_R32G32_SFLOAT (103)
                        offset:                         uint32_t = 8
            pInputAssemblyState:            const VkPipelineInputAssemblyStateCreateInfo* = 000000999A1A7E38:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO (20)
                pNext:                          const void* = NULL
                flags:                          VkPipelineInputAssemblyStateCreateFlags = 0
                topology:                       VkPrimitiveTopology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST (3)
                primitiveRestartEnable:         VkBool32 = 0
            pTessellationState:             const VkPipelineTessellationStateCreateInfo* = NULL
            pViewportState:                 const VkPipelineViewportStateCreateInfo* = 000000999A1A89D8:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO (22)
                pNext:                          const void* = NULL
                flags:                          VkPipelineViewportStateCreateFlags = 0
                viewportCount:                  uint32_t = 1
                pViewports:                     const VkViewport* = UNUSED
                scissorCount:                   uint32_t = 1
                pScissors:                      const VkRect2D* = UNUSED
            pRasterizationState:            const VkPipelineRasterizationStateCreateInfo* = 000000999A1A8A08:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO (23)
                pNext:                          const void* = NULL
                flags:                          VkPipelineRasterizationStateCreateFlags = 0
                depthClampEnable:               VkBool32 = 0
                rasterizerDiscardEnable:        VkBool32 = 0
                polygonMode:                    VkPolygonMode = VK_POLYGON_MODE_FILL (0)
                cullMode:                       VkCullModeFlags = 0
                frontFace:                      VkFrontFace = VK_FRONT_FACE_COUNTER_CLOCKWISE (0)
                depthBiasEnable:                VkBool32 = 0
                depthBiasConstantFactor:        float = 0
                depthBiasClamp:                 float = 0
                depthBiasSlopeFactor:           float = 0
                lineWidth:                      float = 1
            pMultisampleState:              const VkPipelineMultisampleStateCreateInfo* = 000000999A1A8A48:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO (24)
                pNext:                          const void* = NULL
                flags:                          VkPipelineMultisampleStateCreateFlags = 0
                rasterizationSamples:           VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
                sampleShadingEnable:            VkBool32 = 0
                minSampleShading:               float = 0
                pSampleMask:                    const VkSampleMask* = NULL
                alphaToCoverageEnable:          VkBool32 = 0
                alphaToOneEnable:               VkBool32 = 0
            pDepthStencilState:             const VkPipelineDepthStencilStateCreateInfo* = NULL
            pColorBlendState:               const VkPipelineColorBlendStateCreateInfo* = 000000999A1A8A98:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO (26)
                pNext:                          const void* = NULL
                flags:                          VkPipelineColorBlendStateCreateFlags = 0
                logicOpEnable:                  VkBool32 = 0
                logicOp:                        VkLogicOp = VK_LOGIC_OP_CLEAR (0)
                attachmentCount:                uint32_t = 1
                pAttachments:                   const VkPipelineColorBlendAttachmentState* = 000000999A1A8A78
                    pAttachments[0]:                const VkPipelineColorBlendAttachmentState = 000000999A1A8A78:
                        blendEnable:                    VkBool32 = 1
                        srcColorBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_SRC_ALPHA (6)
                        dstColorBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA (7)
                        colorBlendOp:                   VkBlendOp = VK_BLEND_OP_ADD (0)
                        srcAlphaBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        dstAlphaBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        alphaBlendOp:                   VkBlendOp = VK_BLEND_OP_ADD (0)
                        colorWriteMask:                 VkColorComponentFlags = 15 (VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT)
                blendConstants:                 float[4] = 000000999A1A8AC0
                    blendConstants[0]:              float = 1
                    blendConstants[1]:              float = 1
                    blendConstants[2]:              float = 1
                    blendConstants[3]:              float = 1
            pDynamicState:                  const VkPipelineDynamicStateCreateInfo* = 000000999A1A8AF0:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO (27)
                pNext:                          const void* = NULL
                flags:                          VkPipelineDynamicStateCreateFlags = 0
                dynamicStateCount:              uint32_t = 2
                pDynamicStates:                 const VkDynamicState* = 000001D01C369D30
                    pDynamicStates[0]:              const VkDynamicState = VK_DYNAMIC_STATE_VIEWPORT (0)
                    pDynamicStates[1]:              const VkDynamicState = VK_DYNAMIC_STATE_SCISSOR (1)
            layout:                         VkPipelineLayout = 000001D01EE1D150
            renderPass:                     VkRenderPass = 000001D0198433C0
            subpass:                        uint32_t = 0
            basePipelineHandle:             VkPipeline = 0000000000000000
            basePipelineIndex:              int32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pPipelines:                     VkPipeline* = 000000999A1A7E78
        pPipelines[0]:                  VkPipeline = 000001D01EE79598

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 000000999A1A8DF8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 000001D01C3D8AB0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000999A1A8E28:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 000001D01C3D8AB0
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 1
    pCommandBuffers:                VkCommandBuffer* = 000001D01C366E50
        pCommandBuffers[0]:             VkCommandBuffer = 000001D01EE79938

Thread 0, Frame 0:
vkCreateFence(device, pCreateInfo, pAllocator, pFence) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pCreateInfo:                    const VkFenceCreateInfo* = 000000999A1A8DF8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO (8)
        pNext:                          const void* = NULL
        flags:                          VkFenceCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFence:                         VkFence* = 000001D01C5AAC10

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pCreateInfo:                    const VkImageCreateInfo* = 000000999A1A8068:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:                          const void* = NULL
        flags:                          VkImageCreateFlags = 0
        imageType:                      VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_SRGB (43)
        extent:                         VkExtent3D = 000000999A1A8084:
            width:                          uint32_t = 1024
            height:                         uint32_t = 512
            depth:                          uint32_t = 1
        mipLevels:                      uint32_t = 1
        arrayLayers:                    uint32_t = 1
        samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 6 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 1
        pQueueFamilyIndices:            const uint32_t* = UNUSED
        initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pImage:                         VkImage* = 000001D01EE7A160

Thread 0, Frame 0:
vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001D01C6A9420
    image:                          VkImage = 000001D01EE7A160
    pMemoryRequirements:            VkMemoryRequirements* = 000000999A1A7E98:
        size:                           VkDeviceSize = 2097152
        alignment:                      VkDeviceSize = 1024
        memoryTypeBits:                 uint32_t = 130

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 000000999A1A7CB8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 2097152
        memoryTypeIndex:                uint32_t = 7
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 000001D01EE312A0

Thread 0, Frame 0:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    image:                          VkImage = 000001D01EE7A160
    memory:                         VkDeviceMemory = 000001D01EE312A0
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pCreateInfo:                    const VkBufferCreateInfo* = 000000999A1A7C18:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 2097152
        usage:                          VkBufferUsageFlags = 1 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 1
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 000001D01C3D8D50

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001D01C6A9420
    buffer:                         VkBuffer = 000001D01C3D8D50
    pMemoryRequirements:            VkMemoryRequirements* = 000000999A1A7A78:
        size:                           VkDeviceSize = 2097152
        alignment:                      VkDeviceSize = 256
        memoryTypeBits:                 uint32_t = 1665

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 000000999A1A7898:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 2097152
        memoryTypeIndex:                uint32_t = 9
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 000001D01EE2FFE0

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    buffer:                         VkBuffer = 000001D01C3D8D50
    memory:                         VkDeviceMemory = 000001D01EE2FFE0
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    memory:                         VkDeviceMemory = 000001D01EE2FFE0
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 2097152
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 000001D021D40000

Thread 0, Frame 0:
vkUnmapMemory(device, memory) returns void:
    device:                         VkDevice = 000001D01C6A9420
    memory:                         VkDeviceMemory = 000001D01EE2FFE0

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001D01EE79938
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000999A1A81D8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EE79938
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000999A1A8220
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000999A1A8220:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            image:                          VkImage = 000001D01EE7A160
            subresourceRange:               VkImageSubresourceRange = 000000999A1A8250:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EE79938
    srcBuffer:                      VkBuffer = 000001D01C3D8D50
    dstImage:                       VkImage = 000001D01EE7A160
    dstImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount:                    uint32_t = 1
    pRegions:                       const VkBufferImageCopy* = 000000999A1A8288
        pRegions[0]:                    const VkBufferImageCopy = 000000999A1A8288:
            bufferOffset:                   VkDeviceSize = 0
            bufferRowLength:                uint32_t = 0
            bufferImageHeight:              uint32_t = 0
            imageSubresource:               VkImageSubresourceLayers = 000000999A1A8298:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 0
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            imageOffset:                    VkOffset3D = 000000999A1A82A8:
                x:                              int32_t = 0
                y:                              int32_t = 0
                z:                              int32_t = 0
            imageExtent:                    VkExtent3D = 000000999A1A82B4:
                width:                          uint32_t = 1024
                height:                         uint32_t = 512
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EE79938
    srcStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 128 (VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = NULL
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000000999A1A82E0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000000999A1A82E0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            image:                          VkImage = 000001D01EE7A160
            subresourceRange:               VkImageSubresourceRange = 000000999A1A8310:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001D01EE79938

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001D01EC1B480
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000999A1A8350
        pSubmits[0]:                    const VkSubmitInfo = 000000999A1A8350:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000999A1A8B10
                pCommandBuffers[0]:             const VkCommandBuffer = 000001D01EE79938
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = 000001D01C5AAC10

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pCreateInfo:                    const VkImageViewCreateInfo* = 000000999A1A83E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = NULL
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 000001D01EE7A160
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_SRGB (43)
        components:                     VkComponentMapping = 000000999A1A8408:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 000000999A1A8418:
            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = 000001D01C3E6F70

Thread 0, Frame 0:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000000999A1A8B18
        pFences[0]:                     const VkFence = 000001D01C5AAC10
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000000999A1A8B18
        pFences[0]:                     const VkFence = 000001D01C5AAC10

Thread 0, Frame 0:
vkDestroyBuffer(device, buffer, pAllocator) returns void:
    device:                         VkDevice = 000001D01C6A9420
    buffer:                         VkBuffer = 000001D01C3D8D50
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pCreateInfo:                    const VkBufferCreateInfo* = 000000999A1A8628:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 96
        usage:                          VkBufferUsageFlags = 1 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 1
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 000001D01C3D82D0

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001D01C6A9420
    buffer:                         VkBuffer = 000001D01C3D82D0
    pMemoryRequirements:            VkMemoryRequirements* = 000000999A1A8488:
        size:                           VkDeviceSize = 256
        alignment:                      VkDeviceSize = 256
        memoryTypeBits:                 uint32_t = 1665

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 000000999A1A82A8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 256
        memoryTypeIndex:                uint32_t = 9
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 000001D01EE30A30

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    buffer:                         VkBuffer = 000001D01C3D82D0
    memory:                         VkDeviceMemory = 000001D01EE30A30
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pCreateInfo:                    const VkBufferCreateInfo* = 000000999A1A8628:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 96
        usage:                          VkBufferUsageFlags = 130 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_VERTEX_BUFFER_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 1
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 000001D01C3D8490

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001D01C6A9420
    buffer:                         VkBuffer = 000001D01C3D8490
    pMemoryRequirements:            VkMemoryRequirements* = 000000999A1A8488:
        size:                           VkDeviceSize = 256
        alignment:                      VkDeviceSize = 256
        memoryTypeBits:                 uint32_t = 1665

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 000000999A1A82A8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 256
        memoryTypeIndex:                uint32_t = 7
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 000001D01EE2FB30

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    buffer:                         VkBuffer = 000001D01C3D8490
    memory:                         VkDeviceMemory = 000001D01EE2FB30
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    memory:                         VkDeviceMemory = 000001D01EE30A30
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 256
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 000001D021587E00

Thread 0, Frame 0:
vkUnmapMemory(device, memory) returns void:
    device:                         VkDevice = 000001D01C6A9420
    memory:                         VkDeviceMemory = 000001D01EE30A30

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001D01EE79938
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000999A1A8828:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EE79938
    srcBuffer:                      VkBuffer = 000001D01C3D82D0
    dstBuffer:                      VkBuffer = 000001D01C3D8490
    regionCount:                    uint32_t = 1
    pRegions:                       const VkBufferCopy* = 000000999A1A8B68
        pRegions[0]:                    const VkBufferCopy = 000000999A1A8B68:
            srcOffset:                      VkDeviceSize = 0
            dstOffset:                      VkDeviceSize = 0
            size:                           VkDeviceSize = 96

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001D01EE79938

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001D01EC1B480
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000999A1A8870
        pSubmits[0]:                    const VkSubmitInfo = 000000999A1A8870:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000999A1A89D0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001D01EE79938
            signalSemaphoreCount:           uint32_t = 0
            pSignalSemaphores:              const VkSemaphore* = NULL
    fence:                          VkFence = 000001D01C5AAC10

Thread 0, Frame 0:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000000999A1AC7E8
        pFences[0]:                     const VkFence = 000001D01C5AAC10
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000000999A1AC7E8
        pFences[0]:                     const VkFence = 000001D01C5AAC10

Thread 0, Frame 0:
vkDestroyBuffer(device, buffer, pAllocator) returns void:
    device:                         VkDevice = 000001D01C6A9420
    buffer:                         VkBuffer = 000001D01C3D82D0
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pAllocateInfo:                  const VkDescriptorSetAllocateInfo* = 000000999A1AC318:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:                          const void* = NULL
        descriptorPool:                 VkDescriptorPool = 000001D01C409DD0
        descriptorSetCount:             uint32_t = 1
        pSetLayouts:                    const VkDescriptorSetLayout* = 000001D01C368C00
            pSetLayouts[0]:                 const VkDescriptorSetLayout = 000001D01C3E7D30
    pDescriptorSets:                VkDescriptorSet* = 000001D01C3693D0
        pDescriptorSets[0]:             VkDescriptorSet = 000001D01C3BAD80

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                         VkDevice = 000001D01C6A9420
    descriptorWriteCount:           uint32_t = 1
    pDescriptorWrites:              const VkWriteDescriptorSet* = 000000999A1A9D90
        pDescriptorWrites[0]:           const VkWriteDescriptorSet = 000000999A1A9D90:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:                          const void* = NULL
            dstSet:                         VkDescriptorSet = 000001D01C3BAD80
            dstBinding:                     uint32_t = 1
            dstArrayElement:                uint32_t = 0
            descriptorCount:                uint32_t = 1
            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)
            pImageInfo:                     const VkDescriptorImageInfo* = 000001D01EE2C200
                pImageInfo[0]:                  const VkDescriptorImageInfo = 000001D01EE2C200:
                    sampler:                        VkSampler = 0000000000000000
                    imageView:                      VkImageView = 000001D01C3E6F70
                    imageLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            pBufferInfo:                    const VkDescriptorBufferInfo* = UNUSED
            pTexelBufferView:               const VkBufferView* = UNUSED
    descriptorCopyCount:            uint32_t = 0
    pDescriptorCopies:              const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 000000999A1A8DF8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 2 (VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 000001D01C3D9290

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 000000999A1A8E28:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 000001D01C3D9290
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 3
    pCommandBuffers:                VkCommandBuffer* = 000001D01EE2C500
        pCommandBuffers[0]:             VkCommandBuffer = 000001D01EEA0618
        pCommandBuffers[1]:             VkCommandBuffer = 000001D01EEA0C68
        pCommandBuffers[2]:             VkCommandBuffer = 000001D01EEA12B8

Thread 0, Frame 0:
vkCreateFence(device, pCreateInfo, pAllocator, pFence) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pCreateInfo:                    const VkFenceCreateInfo* = 000000999A1A8DF8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO (8)
        pNext:                          const void* = NULL
        flags:                          VkFenceCreateFlags = 1 (VK_FENCE_CREATE_SIGNALED_BIT)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFence:                         VkFence* = 000001D01C5A9F60

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 000000999A1A8DF8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 000001D01EE72E10

Thread 0, Frame 0:
vkCreateFence(device, pCreateInfo, pAllocator, pFence) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pCreateInfo:                    const VkFenceCreateInfo* = 000000999A1A8DF8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO (8)
        pNext:                          const void* = NULL
        flags:                          VkFenceCreateFlags = 1 (VK_FENCE_CREATE_SIGNALED_BIT)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFence:                         VkFence* = 000001D01C5A9FD0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 000000999A1A8DF8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 000001D01EE71690

Thread 0, Frame 0:
vkCreateFence(device, pCreateInfo, pAllocator, pFence) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pCreateInfo:                    const VkFenceCreateInfo* = 000000999A1A8DF8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO (8)
        pNext:                          const void* = NULL
        flags:                          VkFenceCreateFlags = 1 (VK_FENCE_CREATE_SIGNALED_BIT)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFence:                         VkFence* = 000001D01C5AA0B0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 000000999A1A8DF8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 000001D01EE72110

Thread 1, Frame 0:
vkCreateFence(device, pCreateInfo, pAllocator, pFence) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    pCreateInfo:                    const VkFenceCreateInfo* = 000000999AFFE428:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO (8)
        pNext:                          const void* = NULL
        flags:                          VkFenceCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFence:                         VkFence* = 000001D01EEA1C60

Thread 1, Frame 0:
vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001D01C5CE450
    surface:                        VkSurfaceKHR = 000001D01C3691C0
    pSurfaceCapabilities:           VkSurfaceCapabilitiesKHR* = 000000999AFFE508:
        minImageCount:                  uint32_t = 2
        maxImageCount:                  uint32_t = 8
        currentExtent:                  VkExtent2D = 000000999AFFE510:
            width:                          uint32_t = 900
            height:                         uint32_t = 900
        minImageExtent:                 VkExtent2D = 000000999AFFE518:
            width:                          uint32_t = 900
            height:                         uint32_t = 900
        maxImageExtent:                 VkExtent2D = 000000999AFFE520:
            width:                          uint32_t = 900
            height:                         uint32_t = 900
        maxImageArrayLayers:            uint32_t = 1
        supportedTransforms:            VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        currentTransform:               VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        supportedCompositeAlpha:        VkCompositeAlphaFlagsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)
        supportedUsageFlags:            VkImageUsageFlags = 159 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT)

Thread 1, Frame 0:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    swapchain:                      VkSwapchainKHR = 000001D01EE5B758
    timeout:                        uint64_t = 0
    semaphore:                      VkSemaphore = 0000000000000000
    fence:                          VkFence = 000001D01EEA1C60
    pImageIndex:                    uint32_t* = 0

Thread 1, Frame 0:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000000999AFFE858
        pFences[0]:                     const VkFence = 000001D01C5A9F60
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 1, Frame 0:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000000999AFFE858
        pFences[0]:                     const VkFence = 000001D01C5A9F60

Thread 1, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0618
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000999AFFE998:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 1, Frame 0:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0618
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 000000999AFFE9E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001D0198433C0
        framebuffer:                    VkFramebuffer = 000001D01C3E27C0
        renderArea:                     VkRect2D = 000000999AFFEA00:
            offset:                         VkOffset2D = 000000999AFFEA00:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000999AFFEA08:
                width:                          uint32_t = 900
                height:                         uint32_t = 900
        clearValueCount:                uint32_t = 1
        pClearValues:                   const VkClearValue* = 000000999A1AC94C
            pClearValues[0]:                const VkClearValue = 000000999A1AC94C (Union):
                color:                          VkClearColorValue = 000000999A1AC94C (Union):
                    float32:                        float[4] = 000000999A1AC94C
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 000000999A1AC94C
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 000000999A1AC94C
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 000000999A1AC94C:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 1, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0618
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001D01EE79598

Thread 1, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0618
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 000000999AFFE938
        pViewports[0]:                  const VkViewport = 000000999AFFE938:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 900
            height:                         float = 900
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 1, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0618
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 000000999AFFE968
        pScissors[0]:                   const VkRect2D = 000000999AFFE968:
            offset:                         VkOffset2D = 000000999AFFE968:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000999AFFE970:
                width:                          uint32_t = 900
                height:                         uint32_t = 900

Thread 1, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0618
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 000000999AFFE898
        pBuffers[0]:                    const VkBuffer = 000001D01C3D8490
    pOffsets:                       const VkDeviceSize* = 000000999AFFEA38
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 1, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0618
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001D01EE1D150
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000000999A1AC8B0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001D01C3BAD80
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 1, Frame 0:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0618

Thread 1, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0618

Thread 1, Frame 0:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000000999AFFE838
        pFences[0]:                     const VkFence = 000001D01EEA1C60
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 1, Frame 0:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000000999AFFE838
        pFences[0]:                     const VkFence = 000001D01EEA1C60

Thread 1, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001D01EC1B480
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000999AFFEA80
        pSubmits[0]:                    const VkSubmitInfo = 000000999AFFEA80:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000999AFFE878
                pCommandBuffers[0]:             const VkCommandBuffer = 000001D01EEA0618
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 000000999AFFE8D8
                pSignalSemaphores[0]:           const VkSemaphore = 000001D01EE72E10
    fence:                          VkFence = 000001D01C5A9F60

Thread 1, Frame 0:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001D01EC1B480
    pPresentInfo:                   const VkPresentInfoKHR* = 000000999AFFEB10:
        sType:                          VkStructureType = UNKNOWN (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 000000999AFFE8D8
            pWaitSemaphores[0]:             const VkSemaphore = 000001D01EE72E10
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000999AFFE798
            pSwapchains[0]:                 const VkSwapchainKHR = 000001D01EE5B758
        pImageIndices:                  const uint32_t* = 000000999A1AC948
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 1, Frame 1:
vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001D01C5CE450
    surface:                        VkSurfaceKHR = 000001D01C3691C0
    pSurfaceCapabilities:           VkSurfaceCapabilitiesKHR* = 000000999AFFE508:
        minImageCount:                  uint32_t = 2
        maxImageCount:                  uint32_t = 8
        currentExtent:                  VkExtent2D = 000000999AFFE510:
            width:                          uint32_t = 900
            height:                         uint32_t = 900
        minImageExtent:                 VkExtent2D = 000000999AFFE518:
            width:                          uint32_t = 900
            height:                         uint32_t = 900
        maxImageExtent:                 VkExtent2D = 000000999AFFE520:
            width:                          uint32_t = 900
            height:                         uint32_t = 900
        maxImageArrayLayers:            uint32_t = 1
        supportedTransforms:            VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        currentTransform:               VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        supportedCompositeAlpha:        VkCompositeAlphaFlagsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)
        supportedUsageFlags:            VkImageUsageFlags = 159 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT)

Thread 1, Frame 1:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    swapchain:                      VkSwapchainKHR = 000001D01EE5B758
    timeout:                        uint64_t = 0
    semaphore:                      VkSemaphore = 0000000000000000
    fence:                          VkFence = 000001D01EEA1C60
    pImageIndex:                    uint32_t* = 1

Thread 1, Frame 1:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000000999AFFE858
        pFences[0]:                     const VkFence = 000001D01C5A9FD0
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 1, Frame 1:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000000999AFFE858
        pFences[0]:                     const VkFence = 000001D01C5A9FD0

Thread 1, Frame 1:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0C68
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000999AFFE998:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 1, Frame 1:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0C68
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 000000999AFFE9E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001D0198433C0
        framebuffer:                    VkFramebuffer = 000001D01C3E2840
        renderArea:                     VkRect2D = 000000999AFFEA00:
            offset:                         VkOffset2D = 000000999AFFEA00:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000999AFFEA08:
                width:                          uint32_t = 900
                height:                         uint32_t = 900
        clearValueCount:                uint32_t = 1
        pClearValues:                   const VkClearValue* = 000000999A1AC94C
            pClearValues[0]:                const VkClearValue = 000000999A1AC94C (Union):
                color:                          VkClearColorValue = 000000999A1AC94C (Union):
                    float32:                        float[4] = 000000999A1AC94C
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 000000999A1AC94C
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 000000999A1AC94C
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 000000999A1AC94C:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 1, Frame 1:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0C68
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001D01EE79598

Thread 1, Frame 1:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0C68
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 000000999AFFE938
        pViewports[0]:                  const VkViewport = 000000999AFFE938:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 900
            height:                         float = 900
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 1, Frame 1:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0C68
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 000000999AFFE968
        pScissors[0]:                   const VkRect2D = 000000999AFFE968:
            offset:                         VkOffset2D = 000000999AFFE968:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000999AFFE970:
                width:                          uint32_t = 900
                height:                         uint32_t = 900

Thread 1, Frame 1:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0C68
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 000000999AFFE898
        pBuffers[0]:                    const VkBuffer = 000001D01C3D8490
    pOffsets:                       const VkDeviceSize* = 000000999AFFEA38
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 1, Frame 1:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0C68
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001D01EE1D150
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000000999A1AC8B0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001D01C3BAD80
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 1, Frame 1:
vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0C68
    layout:                         VkPipelineLayout = 000001D01EE1D150
    stageFlags:                     VkShaderStageFlags = 17 (VK_SHADER_STAGE_VERTEX_BIT | VK_SHADER_STAGE_FRAGMENT_BIT | VK_SHADER_STAGE_ALL_GRAPHICS | VK_SHADER_STAGE_ALL)
    offset:                         uint32_t = 0
    size:                           uint32_t = 96
    pValues:                        const void* = 000000999AFFE270

Thread 1, Frame 1:
vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0C68
    vertexCount:                    uint32_t = 6
    instanceCount:                  uint32_t = 1
    firstVertex:                    uint32_t = 0
    firstInstance:                  uint32_t = 0

Thread 1, Frame 1:
vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0C68
    layout:                         VkPipelineLayout = 000001D01EE1D150
    stageFlags:                     VkShaderStageFlags = 17 (VK_SHADER_STAGE_VERTEX_BIT | VK_SHADER_STAGE_FRAGMENT_BIT | VK_SHADER_STAGE_ALL_GRAPHICS | VK_SHADER_STAGE_ALL)
    offset:                         uint32_t = 0
    size:                           uint32_t = 96
    pValues:                        const void* = 000000999AFFE270

Thread 1, Frame 1:
vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0C68
    vertexCount:                    uint32_t = 6
    instanceCount:                  uint32_t = 1
    firstVertex:                    uint32_t = 0
    firstInstance:                  uint32_t = 0

Thread 1, Frame 1:
vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0C68
    layout:                         VkPipelineLayout = 000001D01EE1D150
    stageFlags:                     VkShaderStageFlags = 17 (VK_SHADER_STAGE_VERTEX_BIT | VK_SHADER_STAGE_FRAGMENT_BIT | VK_SHADER_STAGE_ALL_GRAPHICS | VK_SHADER_STAGE_ALL)
    offset:                         uint32_t = 0
    size:                           uint32_t = 96
    pValues:                        const void* = 000000999AFFE270

Thread 1, Frame 1:
vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0C68
    vertexCount:                    uint32_t = 6
    instanceCount:                  uint32_t = 1
    firstVertex:                    uint32_t = 0
    firstInstance:                  uint32_t = 0

Thread 1, Frame 1:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0C68

Thread 1, Frame 1:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0C68

Thread 1, Frame 1:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000000999AFFE838
        pFences[0]:                     const VkFence = 000001D01EEA1C60
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 1, Frame 1:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000000999AFFE838
        pFences[0]:                     const VkFence = 000001D01EEA1C60

Thread 1, Frame 1:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001D01EC1B480
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000999AFFEA80
        pSubmits[0]:                    const VkSubmitInfo = 000000999AFFEA80:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000999AFFE878
                pCommandBuffers[0]:             const VkCommandBuffer = 000001D01EEA0C68
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 000000999AFFE8D8
                pSignalSemaphores[0]:           const VkSemaphore = 000001D01EE71690
    fence:                          VkFence = 000001D01C5A9FD0

Thread 1, Frame 1:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001D01EC1B480
    pPresentInfo:                   const VkPresentInfoKHR* = 000000999AFFEB10:
        sType:                          VkStructureType = UNKNOWN (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 000000999AFFE8D8
            pWaitSemaphores[0]:             const VkSemaphore = 000001D01EE71690
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000999AFFE798
            pSwapchains[0]:                 const VkSwapchainKHR = 000001D01EE5B758
        pImageIndices:                  const uint32_t* = 000000999A1AC948
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 1, Frame 2:
vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001D01C5CE450
    surface:                        VkSurfaceKHR = 000001D01C3691C0
    pSurfaceCapabilities:           VkSurfaceCapabilitiesKHR* = 000000999AFFE508:
        minImageCount:                  uint32_t = 2
        maxImageCount:                  uint32_t = 8
        currentExtent:                  VkExtent2D = 000000999AFFE510:
            width:                          uint32_t = 900
            height:                         uint32_t = 900
        minImageExtent:                 VkExtent2D = 000000999AFFE518:
            width:                          uint32_t = 900
            height:                         uint32_t = 900
        maxImageExtent:                 VkExtent2D = 000000999AFFE520:
            width:                          uint32_t = 900
            height:                         uint32_t = 900
        maxImageArrayLayers:            uint32_t = 1
        supportedTransforms:            VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        currentTransform:               VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        supportedCompositeAlpha:        VkCompositeAlphaFlagsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)
        supportedUsageFlags:            VkImageUsageFlags = 159 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT)

Thread 1, Frame 2:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    swapchain:                      VkSwapchainKHR = 000001D01EE5B758
    timeout:                        uint64_t = 0
    semaphore:                      VkSemaphore = 0000000000000000
    fence:                          VkFence = 000001D01EEA1C60
    pImageIndex:                    uint32_t* = 2

Thread 1, Frame 2:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000000999AFFE858
        pFences[0]:                     const VkFence = 000001D01C5AA0B0
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 1, Frame 2:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000000999AFFE858
        pFences[0]:                     const VkFence = 000001D01C5AA0B0

Thread 1, Frame 2:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001D01EEA12B8
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000999AFFE998:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 1, Frame 2:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA12B8
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 000000999AFFE9E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001D0198433C0
        framebuffer:                    VkFramebuffer = 000001D01983CD10
        renderArea:                     VkRect2D = 000000999AFFEA00:
            offset:                         VkOffset2D = 000000999AFFEA00:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000999AFFEA08:
                width:                          uint32_t = 900
                height:                         uint32_t = 900
        clearValueCount:                uint32_t = 1
        pClearValues:                   const VkClearValue* = 000000999A1AC94C
            pClearValues[0]:                const VkClearValue = 000000999A1AC94C (Union):
                color:                          VkClearColorValue = 000000999A1AC94C (Union):
                    float32:                        float[4] = 000000999A1AC94C
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 000000999A1AC94C
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 000000999A1AC94C
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 000000999A1AC94C:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 1, Frame 2:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA12B8
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001D01EE79598

Thread 1, Frame 2:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA12B8
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 000000999AFFE938
        pViewports[0]:                  const VkViewport = 000000999AFFE938:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 900
            height:                         float = 900
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 1, Frame 2:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA12B8
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 000000999AFFE968
        pScissors[0]:                   const VkRect2D = 000000999AFFE968:
            offset:                         VkOffset2D = 000000999AFFE968:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000999AFFE970:
                width:                          uint32_t = 900
                height:                         uint32_t = 900

Thread 1, Frame 2:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA12B8
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 000000999AFFE898
        pBuffers[0]:                    const VkBuffer = 000001D01C3D8490
    pOffsets:                       const VkDeviceSize* = 000000999AFFEA38
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 1, Frame 2:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA12B8
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001D01EE1D150
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000000999A1AC8B0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001D01C3BAD80
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 1, Frame 2:
vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA12B8
    layout:                         VkPipelineLayout = 000001D01EE1D150
    stageFlags:                     VkShaderStageFlags = 17 (VK_SHADER_STAGE_VERTEX_BIT | VK_SHADER_STAGE_FRAGMENT_BIT | VK_SHADER_STAGE_ALL_GRAPHICS | VK_SHADER_STAGE_ALL)
    offset:                         uint32_t = 0
    size:                           uint32_t = 96
    pValues:                        const void* = 000000999AFFE270

Thread 1, Frame 2:
vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA12B8
    vertexCount:                    uint32_t = 6
    instanceCount:                  uint32_t = 1
    firstVertex:                    uint32_t = 0
    firstInstance:                  uint32_t = 0

Thread 1, Frame 2:
vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA12B8
    layout:                         VkPipelineLayout = 000001D01EE1D150
    stageFlags:                     VkShaderStageFlags = 17 (VK_SHADER_STAGE_VERTEX_BIT | VK_SHADER_STAGE_FRAGMENT_BIT | VK_SHADER_STAGE_ALL_GRAPHICS | VK_SHADER_STAGE_ALL)
    offset:                         uint32_t = 0
    size:                           uint32_t = 96
    pValues:                        const void* = 000000999AFFE270

Thread 1, Frame 2:
vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA12B8
    vertexCount:                    uint32_t = 6
    instanceCount:                  uint32_t = 1
    firstVertex:                    uint32_t = 0
    firstInstance:                  uint32_t = 0

Thread 1, Frame 2:
vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA12B8
    layout:                         VkPipelineLayout = 000001D01EE1D150
    stageFlags:                     VkShaderStageFlags = 17 (VK_SHADER_STAGE_VERTEX_BIT | VK_SHADER_STAGE_FRAGMENT_BIT | VK_SHADER_STAGE_ALL_GRAPHICS | VK_SHADER_STAGE_ALL)
    offset:                         uint32_t = 0
    size:                           uint32_t = 96
    pValues:                        const void* = 000000999AFFE270

Thread 1, Frame 2:
vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA12B8
    vertexCount:                    uint32_t = 6
    instanceCount:                  uint32_t = 1
    firstVertex:                    uint32_t = 0
    firstInstance:                  uint32_t = 0

Thread 1, Frame 2:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA12B8

Thread 1, Frame 2:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001D01EEA12B8

Thread 1, Frame 2:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000000999AFFE838
        pFences[0]:                     const VkFence = 000001D01EEA1C60
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 1, Frame 2:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000000999AFFE838
        pFences[0]:                     const VkFence = 000001D01EEA1C60

Thread 1, Frame 2:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001D01EC1B480
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000999AFFEA80
        pSubmits[0]:                    const VkSubmitInfo = 000000999AFFEA80:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000999AFFE878
                pCommandBuffers[0]:             const VkCommandBuffer = 000001D01EEA12B8
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 000000999AFFE8D8
                pSignalSemaphores[0]:           const VkSemaphore = 000001D01EE72110
    fence:                          VkFence = 000001D01C5AA0B0

Thread 1, Frame 2:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001D01EC1B480
    pPresentInfo:                   const VkPresentInfoKHR* = 000000999AFFEB10:
        sType:                          VkStructureType = UNKNOWN (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 000000999AFFE8D8
            pWaitSemaphores[0]:             const VkSemaphore = 000001D01EE72110
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000999AFFE798
            pSwapchains[0]:                 const VkSwapchainKHR = 000001D01EE5B758
        pImageIndices:                  const uint32_t* = 000000999A1AC948
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

Thread 1, Frame 3:
vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001D01C5CE450
    surface:                        VkSurfaceKHR = 000001D01C3691C0
    pSurfaceCapabilities:           VkSurfaceCapabilitiesKHR* = 000000999AFFE508:
        minImageCount:                  uint32_t = 2
        maxImageCount:                  uint32_t = 8
        currentExtent:                  VkExtent2D = 000000999AFFE510:
            width:                          uint32_t = 900
            height:                         uint32_t = 900
        minImageExtent:                 VkExtent2D = 000000999AFFE518:
            width:                          uint32_t = 900
            height:                         uint32_t = 900
        maxImageExtent:                 VkExtent2D = 000000999AFFE520:
            width:                          uint32_t = 900
            height:                         uint32_t = 900
        maxImageArrayLayers:            uint32_t = 1
        supportedTransforms:            VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        currentTransform:               VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        supportedCompositeAlpha:        VkCompositeAlphaFlagsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)
        supportedUsageFlags:            VkImageUsageFlags = 159 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT)

Thread 1, Frame 3:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    swapchain:                      VkSwapchainKHR = 000001D01EE5B758
    timeout:                        uint64_t = 0
    semaphore:                      VkSemaphore = 0000000000000000
    fence:                          VkFence = 000001D01EEA1C60
    pImageIndex:                    uint32_t* = 0

Thread 1, Frame 3:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000000999AFFE858
        pFences[0]:                     const VkFence = 000001D01C5A9F60
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 1, Frame 3:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000000999AFFE858
        pFences[0]:                     const VkFence = 000001D01C5A9F60

Thread 1, Frame 3:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0618
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000999AFFE998:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 1, Frame 3:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0618
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 000000999AFFE9E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001D0198433C0
        framebuffer:                    VkFramebuffer = 000001D01C3E27C0
        renderArea:                     VkRect2D = 000000999AFFEA00:
            offset:                         VkOffset2D = 000000999AFFEA00:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000999AFFEA08:
                width:                          uint32_t = 900
                height:                         uint32_t = 900
        clearValueCount:                uint32_t = 1
        pClearValues:                   const VkClearValue* = 000000999A1AC94C
            pClearValues[0]:                const VkClearValue = 000000999A1AC94C (Union):
                color:                          VkClearColorValue = 000000999A1AC94C (Union):
                    float32:                        float[4] = 000000999A1AC94C
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 000000999A1AC94C
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 000000999A1AC94C
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 000000999A1AC94C:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 1, Frame 3:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0618
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001D01EE79598

Thread 1, Frame 3:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0618
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 000000999AFFE938
        pViewports[0]:                  const VkViewport = 000000999AFFE938:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 900
            height:                         float = 900
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 1, Frame 3:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0618
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 000000999AFFE968
        pScissors[0]:                   const VkRect2D = 000000999AFFE968:
            offset:                         VkOffset2D = 000000999AFFE968:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000999AFFE970:
                width:                          uint32_t = 900
                height:                         uint32_t = 900

Thread 1, Frame 3:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0618
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 000000999AFFE898
        pBuffers[0]:                    const VkBuffer = 000001D01C3D8490
    pOffsets:                       const VkDeviceSize* = 000000999AFFEA38
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 1, Frame 3:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0618
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001D01EE1D150
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000000999A1AC8B0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001D01C3BAD80
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 1, Frame 3:
vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0618
    layout:                         VkPipelineLayout = 000001D01EE1D150
    stageFlags:                     VkShaderStageFlags = 17 (VK_SHADER_STAGE_VERTEX_BIT | VK_SHADER_STAGE_FRAGMENT_BIT | VK_SHADER_STAGE_ALL_GRAPHICS | VK_SHADER_STAGE_ALL)
    offset:                         uint32_t = 0
    size:                           uint32_t = 96
    pValues:                        const void* = 000000999AFFE270

Thread 1, Frame 3:
vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0618
    vertexCount:                    uint32_t = 6
    instanceCount:                  uint32_t = 1
    firstVertex:                    uint32_t = 0
    firstInstance:                  uint32_t = 0

Thread 1, Frame 3:
vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0618
    layout:                         VkPipelineLayout = 000001D01EE1D150
    stageFlags:                     VkShaderStageFlags = 17 (VK_SHADER_STAGE_VERTEX_BIT | VK_SHADER_STAGE_FRAGMENT_BIT | VK_SHADER_STAGE_ALL_GRAPHICS | VK_SHADER_STAGE_ALL)
    offset:                         uint32_t = 0
    size:                           uint32_t = 96
    pValues:                        const void* = 000000999AFFE270

Thread 1, Frame 3:
vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0618
    vertexCount:                    uint32_t = 6
    instanceCount:                  uint32_t = 1
    firstVertex:                    uint32_t = 0
    firstInstance:                  uint32_t = 0

Thread 1, Frame 3:
vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0618
    layout:                         VkPipelineLayout = 000001D01EE1D150
    stageFlags:                     VkShaderStageFlags = 17 (VK_SHADER_STAGE_VERTEX_BIT | VK_SHADER_STAGE_FRAGMENT_BIT | VK_SHADER_STAGE_ALL_GRAPHICS | VK_SHADER_STAGE_ALL)
    offset:                         uint32_t = 0
    size:                           uint32_t = 96
    pValues:                        const void* = 000000999AFFE270

Thread 1, Frame 3:
vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0618
    vertexCount:                    uint32_t = 6
    instanceCount:                  uint32_t = 1
    firstVertex:                    uint32_t = 0
    firstInstance:                  uint32_t = 0

Thread 1, Frame 3:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0618

Thread 1, Frame 3:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0618

Thread 1, Frame 3:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000000999AFFE838
        pFences[0]:                     const VkFence = 000001D01EEA1C60
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 1, Frame 3:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000000999AFFE838
        pFences[0]:                     const VkFence = 000001D01EEA1C60

Thread 1, Frame 3:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001D01EC1B480
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000999AFFEA80
        pSubmits[0]:                    const VkSubmitInfo = 000000999AFFEA80:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000999AFFE878
                pCommandBuffers[0]:             const VkCommandBuffer = 000001D01EEA0618
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 000000999AFFE8D8
                pSignalSemaphores[0]:           const VkSemaphore = 000001D01EE72E10
    fence:                          VkFence = 000001D01C5A9F60

Thread 1, Frame 3:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001D01EC1B480
    pPresentInfo:                   const VkPresentInfoKHR* = 000000999AFFEB10:
        sType:                          VkStructureType = UNKNOWN (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 000000999AFFE8D8
            pWaitSemaphores[0]:             const VkSemaphore = 000001D01EE72E10
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000999AFFE798
            pSwapchains[0]:                 const VkSwapchainKHR = 000001D01EE5B758
        pImageIndices:                  const uint32_t* = 000000999A1AC948
            pImageIndices[0]:               const uint32_t = 0
        pResults:                       VkResult* = NULL

Thread 1, Frame 4:
vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001D01C5CE450
    surface:                        VkSurfaceKHR = 000001D01C3691C0
    pSurfaceCapabilities:           VkSurfaceCapabilitiesKHR* = 000000999AFFE508:
        minImageCount:                  uint32_t = 2
        maxImageCount:                  uint32_t = 8
        currentExtent:                  VkExtent2D = 000000999AFFE510:
            width:                          uint32_t = 900
            height:                         uint32_t = 900
        minImageExtent:                 VkExtent2D = 000000999AFFE518:
            width:                          uint32_t = 900
            height:                         uint32_t = 900
        maxImageExtent:                 VkExtent2D = 000000999AFFE520:
            width:                          uint32_t = 900
            height:                         uint32_t = 900
        maxImageArrayLayers:            uint32_t = 1
        supportedTransforms:            VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        currentTransform:               VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        supportedCompositeAlpha:        VkCompositeAlphaFlagsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)
        supportedUsageFlags:            VkImageUsageFlags = 159 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT)

Thread 1, Frame 4:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    swapchain:                      VkSwapchainKHR = 000001D01EE5B758
    timeout:                        uint64_t = 0
    semaphore:                      VkSemaphore = 0000000000000000
    fence:                          VkFence = 000001D01EEA1C60
    pImageIndex:                    uint32_t* = 1

Thread 1, Frame 4:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000000999AFFE858
        pFences[0]:                     const VkFence = 000001D01C5A9FD0
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 1, Frame 4:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000000999AFFE858
        pFences[0]:                     const VkFence = 000001D01C5A9FD0

Thread 1, Frame 4:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0C68
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000999AFFE998:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 1, Frame 4:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0C68
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 000000999AFFE9E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001D0198433C0
        framebuffer:                    VkFramebuffer = 000001D01C3E2840
        renderArea:                     VkRect2D = 000000999AFFEA00:
            offset:                         VkOffset2D = 000000999AFFEA00:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000999AFFEA08:
                width:                          uint32_t = 900
                height:                         uint32_t = 900
        clearValueCount:                uint32_t = 1
        pClearValues:                   const VkClearValue* = 000000999A1AC94C
            pClearValues[0]:                const VkClearValue = 000000999A1AC94C (Union):
                color:                          VkClearColorValue = 000000999A1AC94C (Union):
                    float32:                        float[4] = 000000999A1AC94C
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 000000999A1AC94C
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 000000999A1AC94C
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 000000999A1AC94C:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 1, Frame 4:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0C68
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001D01EE79598

Thread 1, Frame 4:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0C68
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 000000999AFFE938
        pViewports[0]:                  const VkViewport = 000000999AFFE938:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 900
            height:                         float = 900
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 1, Frame 4:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0C68
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 000000999AFFE968
        pScissors[0]:                   const VkRect2D = 000000999AFFE968:
            offset:                         VkOffset2D = 000000999AFFE968:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000999AFFE970:
                width:                          uint32_t = 900
                height:                         uint32_t = 900

Thread 1, Frame 4:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0C68
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 000000999AFFE898
        pBuffers[0]:                    const VkBuffer = 000001D01C3D8490
    pOffsets:                       const VkDeviceSize* = 000000999AFFEA38
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 1, Frame 4:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0C68
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001D01EE1D150
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000000999A1AC8B0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001D01C3BAD80
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 1, Frame 4:
vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0C68
    layout:                         VkPipelineLayout = 000001D01EE1D150
    stageFlags:                     VkShaderStageFlags = 17 (VK_SHADER_STAGE_VERTEX_BIT | VK_SHADER_STAGE_FRAGMENT_BIT | VK_SHADER_STAGE_ALL_GRAPHICS | VK_SHADER_STAGE_ALL)
    offset:                         uint32_t = 0
    size:                           uint32_t = 96
    pValues:                        const void* = 000000999AFFE270

Thread 1, Frame 4:
vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0C68
    vertexCount:                    uint32_t = 6
    instanceCount:                  uint32_t = 1
    firstVertex:                    uint32_t = 0
    firstInstance:                  uint32_t = 0

Thread 1, Frame 4:
vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0C68
    layout:                         VkPipelineLayout = 000001D01EE1D150
    stageFlags:                     VkShaderStageFlags = 17 (VK_SHADER_STAGE_VERTEX_BIT | VK_SHADER_STAGE_FRAGMENT_BIT | VK_SHADER_STAGE_ALL_GRAPHICS | VK_SHADER_STAGE_ALL)
    offset:                         uint32_t = 0
    size:                           uint32_t = 96
    pValues:                        const void* = 000000999AFFE270

Thread 1, Frame 4:
vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0C68
    vertexCount:                    uint32_t = 6
    instanceCount:                  uint32_t = 1
    firstVertex:                    uint32_t = 0
    firstInstance:                  uint32_t = 0

Thread 1, Frame 4:
vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0C68
    layout:                         VkPipelineLayout = 000001D01EE1D150
    stageFlags:                     VkShaderStageFlags = 17 (VK_SHADER_STAGE_VERTEX_BIT | VK_SHADER_STAGE_FRAGMENT_BIT | VK_SHADER_STAGE_ALL_GRAPHICS | VK_SHADER_STAGE_ALL)
    offset:                         uint32_t = 0
    size:                           uint32_t = 96
    pValues:                        const void* = 000000999AFFE270

Thread 1, Frame 4:
vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0C68
    vertexCount:                    uint32_t = 6
    instanceCount:                  uint32_t = 1
    firstVertex:                    uint32_t = 0
    firstInstance:                  uint32_t = 0

Thread 1, Frame 4:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0C68

Thread 1, Frame 4:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001D01EEA0C68

Thread 1, Frame 4:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000000999AFFE838
        pFences[0]:                     const VkFence = 000001D01EEA1C60
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 1, Frame 4:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000000999AFFE838
        pFences[0]:                     const VkFence = 000001D01EEA1C60

Thread 1, Frame 4:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001D01EC1B480
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000999AFFEA80
        pSubmits[0]:                    const VkSubmitInfo = 000000999AFFEA80:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000999AFFE878
                pCommandBuffers[0]:             const VkCommandBuffer = 000001D01EEA0C68
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 000000999AFFE8D8
                pSignalSemaphores[0]:           const VkSemaphore = 000001D01EE71690
    fence:                          VkFence = 000001D01C5A9FD0

Thread 1, Frame 4:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001D01EC1B480
    pPresentInfo:                   const VkPresentInfoKHR* = 000000999AFFEB10:
        sType:                          VkStructureType = UNKNOWN (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 000000999AFFE8D8
            pWaitSemaphores[0]:             const VkSemaphore = 000001D01EE71690
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000999AFFE798
            pSwapchains[0]:                 const VkSwapchainKHR = 000001D01EE5B758
        pImageIndices:                  const uint32_t* = 000000999A1AC948
            pImageIndices[0]:               const uint32_t = 1
        pResults:                       VkResult* = NULL

Thread 1, Frame 5:
vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001D01C5CE450
    surface:                        VkSurfaceKHR = 000001D01C3691C0
    pSurfaceCapabilities:           VkSurfaceCapabilitiesKHR* = 000000999AFFE508:
        minImageCount:                  uint32_t = 2
        maxImageCount:                  uint32_t = 8
        currentExtent:                  VkExtent2D = 000000999AFFE510:
            width:                          uint32_t = 900
            height:                         uint32_t = 900
        minImageExtent:                 VkExtent2D = 000000999AFFE518:
            width:                          uint32_t = 900
            height:                         uint32_t = 900
        maxImageExtent:                 VkExtent2D = 000000999AFFE520:
            width:                          uint32_t = 900
            height:                         uint32_t = 900
        maxImageArrayLayers:            uint32_t = 1
        supportedTransforms:            VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        currentTransform:               VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        supportedCompositeAlpha:        VkCompositeAlphaFlagsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)
        supportedUsageFlags:            VkImageUsageFlags = 159 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT)

Thread 1, Frame 5:
vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    swapchain:                      VkSwapchainKHR = 000001D01EE5B758
    timeout:                        uint64_t = 0
    semaphore:                      VkSemaphore = 0000000000000000
    fence:                          VkFence = 000001D01EEA1C60
    pImageIndex:                    uint32_t* = 2

Thread 1, Frame 5:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000000999AFFE858
        pFences[0]:                     const VkFence = 000001D01C5AA0B0
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 1, Frame 5:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000000999AFFE858
        pFences[0]:                     const VkFence = 000001D01C5AA0B0

Thread 1, Frame 5:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001D01EEA12B8
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 000000999AFFE998:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 0
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 1, Frame 5:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA12B8
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 000000999AFFE9E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = NULL
        renderPass:                     VkRenderPass = 000001D0198433C0
        framebuffer:                    VkFramebuffer = 000001D01983CD10
        renderArea:                     VkRect2D = 000000999AFFEA00:
            offset:                         VkOffset2D = 000000999AFFEA00:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000999AFFEA08:
                width:                          uint32_t = 900
                height:                         uint32_t = 900
        clearValueCount:                uint32_t = 1
        pClearValues:                   const VkClearValue* = 000000999A1AC94C
            pClearValues[0]:                const VkClearValue = 000000999A1AC94C (Union):
                color:                          VkClearColorValue = 000000999A1AC94C (Union):
                    float32:                        float[4] = 000000999A1AC94C
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 000000999A1AC94C
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 000000999A1AC94C
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 000000999A1AC94C:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 1, Frame 5:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA12B8
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 000001D01EE79598

Thread 1, Frame 5:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA12B8
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 000000999AFFE938
        pViewports[0]:                  const VkViewport = 000000999AFFE938:
            x:                              float = 0
            y:                              float = 0
            width:                          float = 900
            height:                         float = 900
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 1, Frame 5:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA12B8
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 000000999AFFE968
        pScissors[0]:                   const VkRect2D = 000000999AFFE968:
            offset:                         VkOffset2D = 000000999AFFE968:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 000000999AFFE970:
                width:                          uint32_t = 900
                height:                         uint32_t = 900

Thread 1, Frame 5:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA12B8
    firstBinding:                   uint32_t = 0
    bindingCount:                   uint32_t = 1
    pBuffers:                       const VkBuffer* = 000000999AFFE898
        pBuffers[0]:                    const VkBuffer = 000001D01C3D8490
    pOffsets:                       const VkDeviceSize* = 000000999AFFEA38
        pOffsets[0]:                    const VkDeviceSize = 0

Thread 1, Frame 5:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA12B8
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:                         VkPipelineLayout = 000001D01EE1D150
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 000000999A1AC8B0
        pDescriptorSets[0]:             const VkDescriptorSet = 000001D01C3BAD80
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = NULL

Thread 1, Frame 5:
vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA12B8
    layout:                         VkPipelineLayout = 000001D01EE1D150
    stageFlags:                     VkShaderStageFlags = 17 (VK_SHADER_STAGE_VERTEX_BIT | VK_SHADER_STAGE_FRAGMENT_BIT | VK_SHADER_STAGE_ALL_GRAPHICS | VK_SHADER_STAGE_ALL)
    offset:                         uint32_t = 0
    size:                           uint32_t = 96
    pValues:                        const void* = 000000999AFFE270

Thread 1, Frame 5:
vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA12B8
    vertexCount:                    uint32_t = 6
    instanceCount:                  uint32_t = 1
    firstVertex:                    uint32_t = 0
    firstInstance:                  uint32_t = 0

Thread 1, Frame 5:
vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA12B8
    layout:                         VkPipelineLayout = 000001D01EE1D150
    stageFlags:                     VkShaderStageFlags = 17 (VK_SHADER_STAGE_VERTEX_BIT | VK_SHADER_STAGE_FRAGMENT_BIT | VK_SHADER_STAGE_ALL_GRAPHICS | VK_SHADER_STAGE_ALL)
    offset:                         uint32_t = 0
    size:                           uint32_t = 96
    pValues:                        const void* = 000000999AFFE270

Thread 1, Frame 5:
vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA12B8
    vertexCount:                    uint32_t = 6
    instanceCount:                  uint32_t = 1
    firstVertex:                    uint32_t = 0
    firstInstance:                  uint32_t = 0

Thread 1, Frame 5:
vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA12B8
    layout:                         VkPipelineLayout = 000001D01EE1D150
    stageFlags:                     VkShaderStageFlags = 17 (VK_SHADER_STAGE_VERTEX_BIT | VK_SHADER_STAGE_FRAGMENT_BIT | VK_SHADER_STAGE_ALL_GRAPHICS | VK_SHADER_STAGE_ALL)
    offset:                         uint32_t = 0
    size:                           uint32_t = 96
    pValues:                        const void* = 000000999AFFE270

Thread 1, Frame 5:
vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA12B8
    vertexCount:                    uint32_t = 6
    instanceCount:                  uint32_t = 1
    firstVertex:                    uint32_t = 0
    firstInstance:                  uint32_t = 0

Thread 1, Frame 5:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001D01EEA12B8

Thread 1, Frame 5:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001D01EEA12B8

Thread 1, Frame 5:
vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000000999AFFE838
        pFences[0]:                     const VkFence = 000001D01EEA1C60
    waitAll:                        VkBool32 = 1
    timeout:                        uint64_t = 18446744073709551615

Thread 1, Frame 5:
vkResetFences(device, fenceCount, pFences) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001D01C6A9420
    fenceCount:                     uint32_t = 1
    pFences:                        const VkFence* = 000000999AFFE838
        pFences[0]:                     const VkFence = 000001D01EEA1C60

Thread 1, Frame 5:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001D01EC1B480
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 000000999AFFEA80
        pSubmits[0]:                    const VkSubmitInfo = 000000999AFFEA80:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = NULL
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = NULL
            pWaitDstStageMask:              const VkPipelineStageFlags* = NULL
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000000999AFFE878
                pCommandBuffers[0]:             const VkCommandBuffer = 000001D01EEA12B8
            signalSemaphoreCount:           uint32_t = 1
            pSignalSemaphores:              const VkSemaphore* = 000000999AFFE8D8
                pSignalSemaphores[0]:           const VkSemaphore = 000001D01EE72110
    fence:                          VkFence = 000001D01C5AA0B0

Thread 1, Frame 5:
vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001D01EC1B480
    pPresentInfo:                   const VkPresentInfoKHR* = 000000999AFFEB10:
        sType:                          VkStructureType = UNKNOWN (1000001001)
        pNext:                          const void* = NULL
        waitSemaphoreCount:             uint32_t = 1
        pWaitSemaphores:                const VkSemaphore* = 000000999AFFE8D8
            pWaitSemaphores[0]:             const VkSemaphore = 000001D01EE72110
        swapchainCount:                 uint32_t = 1
        pSwapchains:                    const VkSwapchainKHR* = 000000999AFFE798
            pSwapchains[0]:                 const VkSwapchainKHR = 000001D01EE5B758
        pImageIndices:                  const uint32_t* = 000000999A1AC948
            pImageIndices[0]:               const uint32_t = 2
        pResults:                       VkResult* = NULL

